*------------------------------------------------------------*
User:                Dinis
Date:                27 March 2017
Time:                22:39:54 o'clock
Site:                70133260
Platform:            W32_7PRO
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                27 March 2017
Time:                22:39:50 o'clock
*------------------------------------------------------------*
14714  proc freq data=EMWS1.VarClus_VariableSet noprint;
14715  table ROLE*LEVEL/out=WORK.VarClusMETA;
14716  run;
 
NOTE: There were 43 observations read from the data set EMWS1.VARCLUS_VARIABLESET.
NOTE: The data set WORK.VARCLUSMETA has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
14717  proc print data=WORK.VarClusMETA label noobs;
14718  var ROLE LEVEL COUNT;
14719  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14720  title9 ' ';
14721  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14722  run;
 
NOTE: There were 5 observations read from the data set WORK.VARCLUSMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14723  title10;
 
14724  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15108  *------------------------------------------------------------*;
15109  * VarClus: Generation of macros and macro variables;
15110  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15111  *------------------------------------------------------------*;
 
15112  %let EMEXCEPTIONSTRING=;
15113  *------------------------------------------------------------*;
15114  * TRAIN: VarClus;
15115  *------------------------------------------------------------*;
15116  %let EM_ACTION = TRAIN;
15117  %let syscc = 0;
15118
15119  %macro main;
15120
15121     filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
15122     %include temp;
15123     filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
15124     %include temp;
15125     filename temp;
15126
15127    %SetProperties;
15128
15129     %if %upcase(&EM_ACTION) = CREATE %then %do;
15130         filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
15131         %include temp;
15132         filename temp;
15133         %create;
15134     %end;
15135     %else
15136     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15137          filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
15138             %include temp;
15139             filename temp;
15140             %train;
15141     %end;
15142     %else
15143     %if %upcase(&EM_ACTION) = SCORE %then %do;
15144             filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
15145             %include temp;
15146             filename temp;
15147             %score;
15148     %end;
15149     %else
15150     %if %upcase(&EM_ACTION) = REPORT %then %do;
15151             filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
15152             %include temp;
15153             filename temp;
15154             %report;
15155     %end;
15156     /*
15157     %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
15158         %put 'OPENING TABLE';
15159     %end;
15160     %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
15161         %put 'CLOSE TABLE';
15162     %end;
15163     */
15164  %mend main;
15165  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
15166 +
15167 +/* Initialize property macro variables */
15168 +%macro SetProperties;
15169 +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
15170 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
15171 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
15172 +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
15173 +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
15174 +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
15175 +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
15176 +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
15177 +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
15178 +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
15179 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
15180 +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
15181 +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
15182 +
15183 +%mend SetProperties;
15184 +
15185 +%Macro MakeDummyVariables(indata=,
15186 +                          outvar=,
15187 +                          outdata=,
15188 +                          fileref=,
15189 +                          recreatecmeta=N, /* optional */
15190 +                          incmeta=,     /* optional */
15191 +                          outcmeta=,    /* optional */
15192 +                          ndummyvars=_ndummyvars
15193 +                          );
15194 +    %global &ndummyvars;
15195 +
15196 +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
15197 +       class
15198 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15199 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15200 +    ;
15201 +    run;
15202 +    %let &ndummyvars = 0;
15203 +    data _null_;
15204 +    %let dsid = %sysfunc(open(work._classout));
15205 +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
15206 +    %let dsid = %sysfunc(close(&dsid));
15207 +    run;
15208 +
15209 +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
15210 +       input
15211 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15212 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15213 +        / level=nominal stdize=no;
15214 +       make outvar = &outvar;
15215 +       score data = &indata out =&outdata;
15216 +       code  file=  "&fileref";
15217 +    run;
15218 +    %if &recreatecmeta eq Y %then %do;
15219 +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
15220 +    data _tmpds;
15221 +        set _tmpds;
15222 +           ROLE = 'INPUT';
15223 +           LEVEL = 'INTERVAL';
15224 +           CREATOR='DMZIP';
15225 +           if NAME = '_TYPE_' then delete;
15226 +    run;
15227 +    data &outcmeta;
15228 +         set &incmeta _tmpds;
15229 +    run;
15230 +    %end;
15231 +    proc datasets lib=work nolist;
15232 +      delete  _dmdbdat _dmdbcat _classout
15233 +    %if &recreatecmeta eq Y %then %do;
15234 +    _tmpds
15235 +    %end;
15236 +    ;
15237 +    quit;
15238 +%Mend MakeDummyVariables;
15239 +
15240 +/*--- Determine Optimal Number of Cluster ----
15241 +%macro FindClusNum(statds=, groupds=, minvariation=);
15242 +   %global optnclus;
15243 +   data varclus_tmp(drop=_NAME_);
15244 +      set &statDs;
15245 +      where _type_ ='PROPOR';
15246 +   run;
15247 +   proc sort data=varclus_tmp;
15248 +      by _NCL_;
15249 +   run;
15250 +   proc transpose data=varclus_tmp out=varclus_tmp;
15251 +      by _NCL_;
15252 +      var %EM_INTERVAL_INPUT
15253 +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
15254 +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
15255 +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
15256 +          %do i = 2 %to &nvar;
15257 +          %let varname = %sysfunc(varname(&dsid, &i));
15258 +          &varname
15259 +          %end;
15260 +      %end;
15261 +   ;
15262 +   run;
15263 +
15264 +   %if &minVariation eq %then %do;
15265 +       %let minVariation = &EM_PROPERTY_MINVARIATION;
15266 +   %end;
15267 +   %if ^(0<&minVariation<100) %then %do;
15268 +       %let minVariation = 90;
15269 +   %end;
15270 +
15271 +   data _null_;
15272 +      set varclus_tmp end=eof;
15273 +      by _NCL_;
15274 +      retain flag 0;
15275 +      if first._ncl_ then flag=0;
15276 +      if .<col1 < &minVariation then flag=1;
15277 +      if last._ncl_ and ^flag then do;
15278 +         call symput('OPTNCL', _ncl_);
15279 +         stop;
15280 +      end;
15281 +     if eof then call symput('OPTNCL', _ncl_);
15282 +   run;
15283 +
15284 +   %let optnclus = &OPTNCL;
15285 +
15286 +   data varclus_tmp(drop=_NCL_ _NAME_);
15287 +      set &statDs;
15288 +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
15289 +   run;
15290 +   proc sort data=varclus_tmp;
15291 +      by _TYPE_;
15292 +   run;
15293 +   proc transpose data=varclus_tmp out=varclus_tmp;
15294 +      by _TYPE_;
15295 +   run;
15296 +   proc sort data=varclus_tmp;
15297 +      by _name_ _type_;
15298 +   run;
15299 +
15300 +  proc transpose data=varclus_tmp out=&groupds;
15301 +      by _NAME_;
15302 +   run;
15303 +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
15304 +      by Cluster descending Rsquare;
15305 +      where Cluster ne 0;
15306 +   run;
15307 +   proc datasets lib=work nolist mt=(DATA VIEW);
15308 +      delete varclus_tmp;
15309 +   run;
15310 +   quit;
15311 +%mend findClusNum;
15312 +*/
15313 +
15314 +%macro getNclusfromTrain(inoutstat=, nc=);
15315 +%global &nc;
15316 +data _null_;
15317 +    set &inoutstat end=eof;
15318 +    if eof then do;
15319 +    call symput("&nc", _ncl_);
15320 +    end;
15321 +run;
15322 +%mend  getNclusfromTrain;
15323 +
15324 +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
15325 +
15326 +     *--- Build Code to Modify Metadata ---*;
15327 +     filename X "&deltacodefile";
15328 +     data _null_;
15329 +        FILE X;
15330 +        set &groupds end=eof;
15331 +        /*by Cluster;*/
15332 +         if _N_=1 then do;
15333 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
15334 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
15335 +           %end;
15336 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
15337 +           put "if upcase(strip(NAME)) in (";
15338 +        end;
15339 +        if Strip(upcase(Selected)) eq 'YES' then do;
15340 +           string = '"'!!trim(left(VARIABLE))!!'"';
15341 +           put string;
15342 +        end;
15343 +        if eof then do;
15344 +           put ') then ROLE="INPUT";';
15345 +           put 'else ROLE="REJECTED";';
15346 +           put 'end;';
15347 +
15348 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
15349 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
15350 +           %end;
15351 +        end;
15352 +     run;
15353 +     quit;
15354 +
15355 +     filename X;
15356 +
15357 +     quit;
15358 +%mend MakeDeltaCode;
15359 +
15360 +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
15361 +    %if ^%sysfunc(exist(&statds)) %then %do;
15362 +         %goto doendc;
15363 +    %end;
15364 +
15365 +    data &corrds(drop=_TYPE_ _NCL_) ;
15366 +       set &statds;
15367 +       where _type_ eq 'CORR' ;
15368 +    run ;
15369 +    proc sort data=&corrds;
15370 +       by _NAME_ ;
15371 +    run ;
15372 +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
15373 +      BY _NAME_ ;
15374 +    run ;
15375 +    data &corrplotds;
15376 +       length _Y_ $100;
15377 +       set &corrplotDs;
15378 +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
15379 +    run ;
15380 +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
15381 +       set &corrplotds;
15382 +       where _LABEL_ ne '' ;
15383 +       keep _TMP_ _LABEL_ ;
15384 +    run ;
15385 +    data _null_;
15386 +       nobs=0;
15387 +       dsid = open('varclus_match');
15388 +       if dsid then do;
15389 +          nobs = attrn(dsid, 'NOBS');
15390 +          dsid = close(dsid);
15391 +       end;
15392 +       call symput ('CORR_NOBS', nobs);
15393 +    run;
15394 +    %if &corr_nobs %then %do;
15395 +        proc sort data=varclus_match;
15396 +           by _name_;
15397 +        run ;
15398 +        proc sort data=&corrplotds;
15399 +           by _name_;
15400 +        run ;
15401 +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
15402 +           merge varclus_match &corrplotds;
15403 +           by _NAME_ ;
15404 +           if _X_ eq '' then _X_=_NAME_ ;
15405 +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
15406 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
15407 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
15408 +
15409 +       run ;
15410 +    %end;
15411 +    %else %do;
15412 +        proc sort data=&corrplotds;
15413 +           by _name_;
15414 +        run ;
15415 +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
15416 +           set &corrplotds;
15417 +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
15418 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
15419 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
15420 +
15421 +        run ;
15422 +    %end;
15423 +    proc sort data=&corrplotds;
15424 +       by _X_ _Y_;
15425 +    run ;
15426 +    proc datasets lib=work nolist mt=(DATA VIEW);
15427 +       delete varclus_match;
15428 +    run;
15429 +    quit;
15430 +
15431 +%doendc:
15432 +
15433 +%mend MakeVarClusCorrData;
15434 +
15435 +%macro MakeStatPlotData(statds= , outstatplotds=);
15436 +   %if %sysfunc(exist(&statds)) %then %do;
15437 +
15438 +       data varclus_tmp(drop=_NAME_ _NCL_) ;
15439 +          set &statDs;
15440 +          where _type_ in('MEAN', 'STD', 'N');
15441 +       run ;
15442 +       proc transpose data=varclus_tmp out=&outstatplotds;
15443 +          id _TYPE_ ;
15444 +       run ;
15445 +       data &outstatplotds;
15446 +          set &outstatplotds(obs=1000);
15447 +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
15448 +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
15449 +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
15450 +          else SCALEDSTD= STD ;
15451 +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
15452 +       run ;
15453 +       proc sort data=&outstatplotds;
15454 +          by descending SCALEDSTD ;
15455 +       run ;
15456 +       proc datasets lib=work nolist mt=(DATA VIEW);
15457 +          delete varclus_tmp;
15458 +       run;
15459 +       quit;
15460 +    %end;
15461 +
15462 +%mend MakeStatPlotData;
15463 +
15464 +
15465 +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
15466 +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
15467 +    data &EM_USER_OUTSTATSCORE;
15468 +          set &indata;
15469 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
15470 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
15471 +          if _TYPE_ = 'STD' then _NAME_='STD';
15472 +          DROP _TYPE_ _NCL_;
15473 +     run;
15474 +
15475 +     filename _file_  "&fileRef";
15476 +
15477 +     data _null_;
15478 +        FILE _file_ MOD;
15479 +        put ' ';
15480 +        put '/*-------------------------------------------------*/';
15481 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
15482 +        put '/*-------------------------------------------------*/';
15483 +        put ' ';
15484 +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
15485 +
15486 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
15487 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
15488 +
15489 +        %let k = 1;
15490 +        %do %while(^%sysfunc(fetch(&dsid)));
15491 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
15492 +                %if &k > 2 %then %do;
15493 +                 %let cn = %eval(&k-2);
15494 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
15495 +                %end;
15496 +                %let k = %eval(&k+1);
15497 +        %end;
15498 +
15499 +        %let rc = %sysfunc(rewind(&dsid));
15500 +
15501 +        %do i= 2 %to &nvar;
15502 +            %let _varname =  %sysfunc(varname(&dsid, &i));
15503 +            %do %while(^%sysfunc(fetch(&dsid)));
15504 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
15505 +                %if &_name = MEAN %then
15506 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
15507 +                %else %if &_name = STD %then
15508 +                %let _std = %sysfunc(getvarn(&dsid, &i));
15509 +                %else %do;
15510 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
15511 +                      %let abscoeff = %sysfunc(abs(&coeff));
15512 +                          %if &abscoeff >  0 %then %do;
15513 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
15514 +                           %end;
15515 +                 %end;
15516 +             %end;
15517 +             %let rc = %sysfunc(rewind(&dsid));
15518 +         %end;
15519 +
15520 +        %let dsid= %sysfunc(close(&dsid));
15521 +       run;
15522 +%mend CreateScoreCode;
15523 +
15524 +
15525 +
15526 +/*----------------------------------------------------------
15527 +    Instead of using %MakeRSquareData,
15528 +    %MakeVarClusResultTable at macro2.source is used
15529 + +----------------------------------------------------------*/
15530 +
15531 +
15532 +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
15533 +
15534 +/* modifying  from ods rsquare = data */
15535 +
15536 +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
15537 +    Length Cluster $16;
15538 +    length Variable $32;
15539 +    Length VariableLabel $64;
15540 +    set &indata; retain CurrentCluster;
15541 +    if NumberOfClusters ^= &ncluster then delete;
15542 +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
15543 +    CurrentCluster = Cluster;
15544 +   run;
15545 +proc sort data =&outdata ;
15546 +     by Cluster RsquareRatio;
15547 +run;
15548 +data _tmprsq(drop=index);
15549 +     set &outdata; by Cluster;
15550 +     if first.Cluster then do;
15551 +     index = strip(scan(Cluster,2 ));
15552 +     Variable = "Clus"||index;
15553 +     VariableLabel = "Cluster Component "||index;
15554 +     OwnCluster = 1;
15555 +     NextClosest = .;
15556 +     RsquareRatio = 0;
15557 +     output;
15558 +     end;
15559 +run;
15560 +
15561 +proc sort data = _tmprsq ;
15562 +     by Cluster RsquareRatio;
15563 +run;
15564 +data &outdata;
15565 +     set &outdata _tmprsq;
15566 +by Cluster;
15567 +run;
15568 +
15569 +
15570 +/* Just create the Selected variable with all YES */
15571 +
15572 +data &outdata;
15573 +    set &outdata; by cluster;
15574 +    length Selected $8;
15575 +    Selected = 'YES';
15576 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
15577 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
15578 +    rename OwnCluster = RSqWithClusterComp;
15579 +    rename NextClosest = RSqWithNextClusComp;
15580 +run;
15581 +
15582 +
15583 +/* Selected = Y/N will be done %score section -----
15584 +
15585 +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
15586 +data &outdata;
15587 +    set &outdata; by cluster;
15588 +    length Selected $8;
15589 +    if first.Cluster then Selected = 'YES';
15590 +    else Selected = 'NO';
15591 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
15592 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
15593 +    rename OwnCluster = RSqWithClusterComp;
15594 +    rename NextClosest = RSqWithNextClusComp;
15595 +run;
15596 +%end;
15597 +%else %do;
15598 +data &outdata;
15599 +    set &outdata; by cluster;
15600 +    if last.Cluster then Selected = 'YES';
15601 +    else Selected = 'NO';
15602 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
15603 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
15604 +    rename OwnCluster = RSqWithClusterComp;
15605 +    rename NextClosest = RSqWithNextClusComp;
15606 +run;
15607 +%end;
15608 +---------------------------------------------------------------*/
15609 +
15610 +%if %sysfunc(exist(&inClusRSquare)) %then %do;
15611 +/* to calculate NextClosestClusRsq */
15612 +proc transpose data = &inClusRSquare  out=_clusRsq;
15613 +      by cluster;
15614 +      run;
15615 +data _clusRsq;
15616 +     set _clusRsq;
15617 +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
15618 +run;
15619 +
15620 +proc sort data=_clusRsq;
15621 +    by cluster col1;
15622 +    run;
15623 +data _clusRsq(drop=_NAME_ _LABEL_);
15624 +     set _clusRsq; by cluster;
15625 +     if last.Cluster then output;
15626 +     label  COL1 = 'R-Sqaure with Next Cluster Component';
15627 +     rename COL1 = RSqWithNextClusComp;
15628 +     rename Cluster = Variable;
15629 +     label  Cluster = "Variable";
15630 +run;
15631 +
15632 +proc sort data =&outdata;
15633 +     by Variable;
15634 +run;
15635 +data &outdata;
15636 +    merge &outdata _clusRsq;
15637 +    by Variable;
15638 +run;
15639 +proc sort data =&outdata;
15640 +by Cluster  RsquareRatio;
15641 +run;
15642 +quit;
15643 +%end;
15644 +
15645 +proc datasets lib = work nolist;
15646 +     delete _tmprsq _clusRsq;
15647 +     run;
15648 +quit;
15649 +
15650 +%mend MakeRSquareData;
15651 +
15652 +
15653 +/*-------------------------------------------------------------------------*/
15654 +
15655 +
15656 +
15657 +%macro ModifyCorr(indata=,
15658 +                  outdata=,
15659 +                  rsquare = Y
15660 +                  );
15661 +    data corr_tmp;
15662 +        set &indata;
15663 +    run;
15664 +     proc sql;
15665 +           update &indata
15666 +           set
15667 +     %let dsid = %sysfunc(open(work.corr_tmp));
15668 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
15669 +          %do i = 4 %to &nvar;
15670 +          %let _name = %sysfunc(varname(&dsid, &i));
15671 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
15672 +            %else  %let _name_md = &_name;
15673 +            %if &i < &nvar %then %do;
15674 +               &_name = 1- &_name_md ,
15675 +            %end;
15676 +            %else %do;
15677 +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
15678 +            %end;
15679 +          %end;
15680 +      %let dsid= %sysfunc(close(&dsid));
15681 +
15682 +      select * from &indata;
15683 +      run;
15684 +      proc datasets lib = work nolist;
15685 +           delete corr_tmp;
15686 +      run;
15687 +      quit;
15688 +
15689 + %mend ModifyCorr;
15690 +
15691 + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
15692 +    data &outdata(drop= _NCL_  _TYPE_);
15693 +       set &indata;
15694 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
15695 +       rename _NAME_ = Cluster;
15696 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
15697 +    run;
15698 +    %if &RSquare eq Y %then %do;
15699 +     data corr_tmp;
15700 +        set &outdata;
15701 +     run;
15702 +
15703 +     data &outdata(drop=i);
15704 +          set &outdata;
15705 +          %let dsid = %sysfunc(open(work.corr_tmp));
15706 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
15707 +          %do i = 2 %to &nvar;
15708 +            %let _name = %sysfunc(varname(&dsid, &i));
15709 +            %let _name_md = &_name.**2;
15710 +                &_name = &_name_md;
15711 +          %end;
15712 +      %let dsid= %sysfunc(close(&dsid));
15713 +      run;
15714 +      proc datasets lib = work nolist;
15715 +           delete corr_tmp;
15716 +      run;
15717 +
15718 +    %end;
15719 +     quit;
15720 +%mend MakeClusStructCorrData;
15721 +
15722 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
15723 +    data &outdata(drop= _NCL_  _TYPE_);
15724 +       set &indata;
15725 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
15726 +       rename _NAME_ = Cluster;
15727 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
15728 +    run;
15729 +    data corr_tmp;
15730 +        set &outdata;
15731 +    run;
15732 +
15733 +    %let dsid = %sysfunc(open(work.corr_tmp));
15734 +    %let nclus2= %eval(&ncluster+1);
15735 +    data &outdata;
15736 +         set &outdata;
15737 +          %do i = 2 %to &nclus2;
15738 +          %let i_1 = %eval(&i-1);
15739 +            %let _name = %sysfunc(varname(&dsid, &i));
15740 +            %let _newName = Clus&i_1;
15741 +                rename &_name = &_newName; ;
15742 +                *label &_name ="Cluster &i_1";
15743 +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
15744 +          %end;
15745 +          keep Cluster
15746 +          %do i = 2 %to &nclus2;
15747 +                %let _name = %sysfunc(varname(&dsid, &i));
15748 +                &_name
15749 +          %end;
15750 +          ;
15751 +    %let dsid= %sysfunc(close(&dsid));
15752 +     run;
15753 +     quit;
15754 +
15755 +    %if &RSquare eq Y %then %do;
15756 +
15757 +       data corr_tmp;
15758 +        set &outdata;
15759 +     run;
15760 +
15761 +     data &outdata(drop=i);
15762 +          set &outdata;
15763 +          %let dsid = %sysfunc(open(work.corr_tmp));
15764 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
15765 +          %do i = 2 %to &nvar;
15766 +            %let _name = %sysfunc(varname(&dsid, &i));
15767 +            %let _name_md = &_name.**2;
15768 +                &_name = &_name_md;
15769 +          %end;
15770 +      %let dsid= %sysfunc(close(&dsid));
15771 +      run;
15772 +    %end;
15773 +
15774 +    %if &makeplotds eq Y %then %do;
15775 +     proc transpose data = &outdata
15776 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
15777 +          by cluster;
15778 +     run;
15779 +     data &plotds;
15780 +          set  &plotds;
15781 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15782 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15783 +     run;
15784 +     %end;
15785 +     proc datasets lib = work nolist;
15786 +           delete corr_tmp;
15787 +     run;
15788 +     quit;
15789 +%mend MakeInterClusCorrData;
15790 +
15791 +
15792 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
15793 +
15794 +data &outlink(drop = Selected);
15795 +     set &indata;
15796 +     LINKID = _N_;
15797 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
15798 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
15799 +run;
15800 +data &outnode(keep=NODEID TYPE LABEL);
15801 +    set &indata;
15802 +    length TYPE $16;
15803 +    rename Variable = NODEID;
15804 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
15805 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
15806 +    then  TYPE = "CLUSTER";
15807 +    else  TYPE="VARIABLE";
15808 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
15809 +run;
15810 +quit;
15811 +%mend MakeClusConstellData;
15812 +
15813 +
15814 +
15815 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
15816 +
15817 +data &outlink(drop = Selected);
15818 +     set &indata;
15819 +     LINKID = _N_;
15820 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
15821 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
15822 +run;
15823 +data &outnode(keep=NODEID TYPE LABEL);
15824 +    set &indata;
15825 +    length TYPE $16;
15826 +    rename Variable = NODEID;
15827 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
15828 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
15829 +    then  TYPE = "CLUSTER";
15830 +    else  TYPE="VARIABLE";
15831 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
15832 +run;
15833 +quit;
15834 +%mend MakeClusConstellData;
15835 +
15836 +
15837 +/*--- This will work only when inds is not a view data -------
15838 +
15839 +%macro getNVarNObs(inds=, nvar=, nobs=);
15840 +
15841 +    %global &nvar;
15842 +    %global &nobs;
15843 +    data _null_;
15844 +         dsid = open("&inds");
15845 +         nv = attrn(dsid, 'NVAR');
15846 +         no = attrn(dsid, 'NOBS');
15847 +         dsid = close(dsid);
15848 +         call symput("&nvar", nv);
15849 +         call symput("&nobs", no);
15850 +    run;
15851 +    quit;
15852 +%mend  getNVarNObs;
15853 +
15854 ++---------------------------------------------------------------*/
15855 +
15856 +
15857 +%macro getNVar(inds=, nvar=);
15858 +    %global &nvar;
15859 +    data _null_;
15860 +         dsid = open("&inds");
15861 +         nv = attrn(dsid, 'NVAR');
15862 +         dsid = close(dsid);
15863 +         call symput("&nvar", nv);
15864 +    run;
15865 +    quit;
15866 +%mend  getNVar;
15867 +
15868 +
15869 +
15870 +%macro getNObs(inds=, nobs=);
15871 +    %global &nobs;
15872 +    data _null_;
15873 +        set &inds end=eof;
15874 +        if eof then call symput("&nobs", _N_);
15875 +    run;
15876 +    quit;
15877 +%mend  getNObs;
15878 +
15879 +%Macro CreateVarclusMeta(trainnum=);
15880 +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
15881 +    data &EM_USER_VARCLUSMETA;
15882 +         length TrainNum 8.;
15883 +         length NewTrain $8;
15884 +         length NGCluster 8.;
15885 +         length ExportedComp $16;
15886 +         length HideVariable $8;
15887 +         TrainNum = &trainnum;
15888 +         NewTrain = "Y";
15889 +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
15890 +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
15891 +         NGCluster = 0; /* zero means no twostage */
15892 +   run;
15893 +   quit;
15894 +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
15895 +
15896 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
15897 +    data &outdata(drop= _NCL_  _TYPE_);
15898 +       set &indata;
15899 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
15900 +       %if &globalclusid ne %then %do;
15901 +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
15902 +       rename _NAME_ = Cluster;
15903 +       %end;
15904 +       %else %do;
15905 +        _NAME_ = upcase(_NAME_);
15906 +       rename _NAME_ = Cluster;
15907 +       %end;
15908 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
15909 +    run;
15910 +    data corr_tmp;
15911 +        set &outdata;
15912 +    run;
15913 +
15914 +    %let dsid = %sysfunc(open(work.corr_tmp));
15915 +    %let nclus2= %eval(&ncluster+1);
15916 +    data &outdata;
15917 +         set &outdata;
15918 +          %do i = 2 %to &nclus2;
15919 +          %let i_1 = %eval(&i-1);
15920 +            %let _name = %sysfunc(varname(&dsid, &i));
15921 +            %if &globalclusid ne %then
15922 +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
15923 +                     rename &_name = &_newName;
15924 +                     *label &_name ="GC &globalclusid : Cluster &i_1";
15925 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
15926 +                %end;
15927 +            %else
15928 +                %do; %let _newName = CLUS&i_1;
15929 +                     rename &_name = &_newName;
15930 +                     *label &_name ="Cluster &i_1";
15931 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
15932 +                %end;
15933 +          %end;
15934 +          keep Cluster
15935 +          %do i = 2 %to &nclus2;
15936 +                %let _name = %sysfunc(varname(&dsid, &i));
15937 +                &_name
15938 +          %end;
15939 +          ;
15940 +    %let dsid= %sysfunc(close(&dsid));
15941 +     run;
15942 +     quit;
15943 +
15944 +    %if &RSquare eq Y %then %do;
15945 +
15946 +       data corr_tmp;
15947 +        set &outdata;
15948 +     run;
15949 +
15950 +     data &outdata;
15951 +          set &outdata;
15952 +          %let dsid = %sysfunc(open(work.corr_tmp));
15953 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
15954 +          %do i = 2 %to &nvar;
15955 +            %let _name = %sysfunc(varname(&dsid, &i));
15956 +            %let _name_md = &_name.**2;
15957 +                &_name = &_name_md;
15958 +          %end;
15959 +      %let dsid= %sysfunc(close(&dsid));
15960 +      run;
15961 +    %end;
15962 +
15963 +    %if &makeplotds eq Y %then %do;
15964 +     proc transpose data = &outdata
15965 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
15966 +          by cluster;
15967 +     run;
15968 +     data &plotds;
15969 +          set  &plotds;
15970 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15971 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15972 +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
15973 +     run;
15974 +     %end;
15975 +     proc datasets lib = work nolist;
15976 +           delete corr_tmp;
15977 +     run;
15978 +     quit;
15979 +%mend MakeInterClusCorrData;
15980 +
15981 +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
15982 +    data _tmpds(drop= _NCL_);
15983 +       set &indata;
15984 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
15985 +       %if &globalclusid ne %then %do;
15986 +           _NAME_ = "GC&globalclusid.";
15987 +       rename _NAME_ = Cluster;
15988 +       %end;
15989 +       %else %do;
15990 +        _NAME_ = "CLUS";
15991 +        rename _NAME_ = Cluster;
15992 +       %end;
15993 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
15994 +    run;
15995 +    proc transpose data =_tmpds out =&outdata;
15996 +    run;
15997 +
15998 +    data &outdata(drop=COL1);
15999 +        %if &globalclusid ne %then %do;
16000 +        length GCluster $16;
16001 +        %end;
16002 +        length Cluster $32;
16003 +        length _NAME_ $32;
16004 +         set &outdata;
16005 +         _NAME_ = upcase(_NAME_);
16006 +         rename _NAME_=Variable;
16007 +         *label _NAME_="Variable";
16008 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16009 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16010 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16011 +
16012 +         %if &globalclusid ne %then %do;
16013 +          GCluster = "GC&globalclusid";
16014 +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
16015 +         %end;
16016 +         %else %do;
16017 +         Cluster = "CLUS"||strip(COL1);
16018 +        %end;
16019 +         rename COL2 = RSqWithOwnClusComp;
16020 +         *label COL2 = "R-Square With Own Cluster Component";
16021 +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
16022 +
16023 +   run;
16024 +   proc sort data =&outdata;
16025 +        by Cluster RSqWithOwnClusComp;
16026 +   run;
16027 +   proc datasets lib = work nolist;
16028 +           delete _tmpds;
16029 +   run;
16030 +   quit;
16031 +%mend MakeOwnRSquare;
16032 +
16033 +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
16034 +    data &outdata(drop= _NCL_  _TYPE_);
16035 +       %if &globalclusid ne %then %do;
16036 +        length GCluster $16;
16037 +        %end;
16038 +       set &indata;
16039 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
16040 +       %if &globalclusid ne %then %do;
16041 +         GCluster = "GC&globalclusid";
16042 +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
16043 +         rename _NAME_ = Cluster;
16044 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16045 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16046 +
16047 +       %end;
16048 +       %else %do;
16049 +         _NAME_ = upcase(_NAME_);
16050 +         rename _NAME_ = Cluster;
16051 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16052 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16053 +
16054 +       %end;
16055 +     run;
16056 +    %if &RSquare eq Y %then %do;
16057 +     data corr_tmp;
16058 +          set &outdata;
16059 +     run;
16060 +     %let istart = 2;
16061 +     %if &globalclusid ne %then %let istart = 3;
16062 +     data &outdata;
16063 +          set &outdata;
16064 +          %let dsid = %sysfunc(open(work.corr_tmp));
16065 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16066 +          %do i =&istart %to &nvar;
16067 +            %let _name = %sysfunc(varname(&dsid, &i));
16068 +            %let _name_md = &_name.**2;
16069 +                &_name = &_name_md;
16070 +          %end;
16071 +      %let dsid= %sysfunc(close(&dsid));
16072 +      run;
16073 +      proc datasets lib = work nolist;
16074 +           delete corr_tmp;
16075 +      run;
16076 +    %end;
16077 +     quit;
16078 +%mend MakeClusStructCorrData;
16079 +
16080 +/*
16081 +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
16082 +*/
16083 +
16084 +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
16085 +
16086 +     /* The indata should be the outdata
16087 +        from %MakeClusStructCorrData(indata=, outdata=, ); */
16088 +
16089 +     proc sort data =&indata out=_tmpclusRsq;
16090 +     by cluster;
16091 +     run;
16092 +
16093 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
16094 +      by cluster;
16095 +     run;
16096 +
16097 +     proc sort data=_tmpclusRsq;
16098 +        by _NAME_ COL1;
16099 +     run;
16100 +
16101 +     data _tmpclusRsq;
16102 +         length _NAME_ $32;
16103 +         set _tmpclusRsq; by _NAME_;
16104 +          _NAME_ = upcase(_NAME_);
16105 +          %if &ncluster ne 1 %then %do;
16106 +             if last._NAME_ then delete;
16107 +          %end;
16108 +          %else %do;
16109 +             COL1 = 0;
16110 +          %end;
16111 +     run;
16112 +     /* need to sort again */
16113 +     proc sort data=_tmpclusRsq;
16114 +        by _NAME_ COL1;
16115 +     run;
16116 +
16117 +     data &outdata;
16118 +         set _tmpclusRsq; by _NAME_;
16119 +         Cluster = upcase(Cluster);
16120 +         if last._NAME_ then output;
16121 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
16122 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
16123 +         rename COL1 = RSqWithNextClusComp;
16124 +         Cluster = upcase(Cluster);
16125 +         rename Cluster = ClosestCluster;
16126 +         *label  Cluster = "Next Closest Cluster";
16127 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
16128 +         rename _NAME_ = Variable;
16129 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16130 +    run;
16131 +
16132 +
16133 +    %if &globalclusid ne %then %do;
16134 +    data &outdata;
16135 +       length GCluster $16;
16136 +       set &outdata;
16137 +       GCluster = "GC&globalclusid";
16138 +       run;
16139 +    %end;
16140 +    proc datasets lib = work nolist;
16141 +           delete _tmpclusRsq;
16142 +    run;
16143 +    quit;
16144 +%mend FindNextClosestClusByVar;
16145 +
16146 +
16147 +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
16148 +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
16149 +     proc sort data =&indata out=_tmpclusRsq;
16150 +     by cluster;
16151 +     run;
16152 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
16153 +     by cluster;
16154 +     run;
16155 +     proc sort data=_tmpclusRsq;
16156 +        by _NAME_ col1;
16157 +     run;
16158 +     data _tmpclusRsq;
16159 +         length _NAME_ $32;
16160 +         set _tmpclusRsq; by _NAME_;
16161 +          _NAME_ = upcase(_NAME_);
16162 +          %if &ncluster ne 1 %then %do;
16163 +             if last._NAME_ then delete;
16164 +          %end;
16165 +          %else %do;
16166 +             COL1 = 0;
16167 +          %end;
16168 +     run;
16169 +     data &outdata;
16170 +         set _tmpclusRsq; by _NAME_;
16171 +         Cluster = upcase(Cluster);
16172 +         if last._NAME_ then output;
16173 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
16174 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
16175 +         rename COL1 = RSqWithNextClusComp;
16176 +         Cluster = upcase(Cluster);
16177 +         rename Cluster = ClosestCluster;
16178 +         *label  Cluster = "Next Closest Cluster";
16179 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
16180 +         rename _NAME_ = Variable;
16181 +         *label  _NAME_ = "Variable";
16182 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16183 +
16184 +    run;
16185 +    %if &globalclusid ne %then %do;
16186 +    data &outdata;
16187 +       length GCluster $16;
16188 +       set &outdata;
16189 +       GCluster = "GC&globalclusid";
16190 +       run;
16191 +    %end;
16192 +
16193 +    proc datasets lib = work nolist;
16194 +           delete _tmpclusRsq;
16195 +    run;
16196 +
16197 +    quit;
16198 +%mend FindNextClosestClusByCluster;
16199 +
16200 +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
16201 +/*----
16202 +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
16203 +-----------*/
16204 +
16205 +proc sort data =&indata1;
16206 +    by Variable;
16207 +run;
16208 +proc sort data =&indata2;
16209 +    by Variable;
16210 +run;
16211 +data &outdata;
16212 +    merge &indata1 &indata2;
16213 +    by Variable;
16214 +    length Type $16;
16215 +    Type = 'Variable';
16216 +    *label Type ='Type';
16217 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
16218 +run;
16219 +
16220 +
16221 +data &indata3;
16222 +    set  &indata3 ;
16223 +    length RSqWithOwnClusComp 8.;
16224 +    Cluster = Variable;
16225 +    RSqWithOwnClusComp = 1;
16226 +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
16227 +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
16228 +    length Type $16;
16229 +    Type = 'ClusterComp';
16230 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
16231 +
16232 +;
16233 +run;
16234 +
16235 +proc sort data=&outdata;
16236 +    by Cluster;
16237 +run;
16238 +proc sort data =&indata3;
16239 +    by Cluster;
16240 +run;
16241 +
16242 +data &outdata;
16243 +     set &outdata &indata3;
16244 +     by Cluster;
16245 +run;
16246 +
16247 +
16248 +/* Create the Selected variable with all YES */
16249 +
16250 +data &outdata;
16251 +     set &outdata;
16252 +     length RsqRatio 8.;
16253 +     length Selected $8;
16254 +     *label RSqRatio = "1-R**2 Ratio";
16255 +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
16256 +     *label Selected = "Variable Selected";
16257 +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
16258 +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
16259 +     Selected ='YES';
16260 +     rename _LABEL_ = Label;
16261 +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
16262 +run;
16263 +
16264 +
16265 +/*----  Selected = Y/N will be assigened at the %score                   -------+
16266 +        Just create the Selected variable with all YES at the step above
16267 + +------------------------------------------------------------------------------+
16268 +
16269 +proc sort data=&outdata;
16270 +    by Cluster RsqRatio;
16271 +run;
16272 +
16273 +%if &selectedcomp eq CLUSTERCOMP %then %do;
16274 +data &outdata;
16275 +     set &outdata; by Cluster;
16276 +     length Selected $8;
16277 +     label Selected = "Variable Selected";
16278 +     if  first.Cluster then Selected ='Yes';
16279 +     else Selected = 'No';
16280 +    run;
16281 +%end;
16282 +%else %do;
16283 +data &outdata(drop = _var _varchange);
16284 +     set &outdata; retain _var 0; by Cluster;
16285 +     length Selected $8;
16286 +     label Selected = "Variable Selected";
16287 +     if first.Cluster then  _varchange = 0;
16288 +     else _varchange =1;
16289 +     if _var ne _varchange then  Selected  = 'Yes';
16290 +     else Selected = 'No';
16291 +     if last.cluster then  _var = 0;
16292 +     else _var = _varchange;
16293 +run;
16294 +%end;
16295 +
16296 +--------------------------------------------------------------*/
16297 +
16298 +quit;
16299 +%mend MakeVarClusResultTable;
16300 +
16301 +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
16302 +     proc sort data =&indata;
16303 +        by cluster;
16304 +     run;
16305 +     proc transpose data =&indata
16306 +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
16307 +          by cluster;
16308 +     run;
16309 +     data &outdata;
16310 +          set  &outdata;
16311 +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16312 +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16313 +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
16314 +     run;
16315 +     %if &globalclusid ne %then %do;
16316 +     data &outdata;
16317 +          Length GCluster $16;
16318 +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16319 +          set  &outdata;
16320 +          GCluster ="GC&globalclusid.";
16321 +          run;
16322 +     %end;
16323 +
16324 +%Mend MakePlotDataFromCorrTable;
16325 +
16326 +
16327 +%macro MakeCorrelation(indata=,
16328 +                       outstat=_tmpoutstat,
16329 +                       corrmatrix=N,
16330 +                       outcorr=_tmpoutcorr,
16331 +                       includeclassvar=N,
16332 +                       target=,
16333 +                       freq=,
16334 +                       weight=);
16335 +   %if &target eq  %then %do;
16336 +
16337 +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
16338 +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
16339 +       %if &includeclassvar eq Y %then %do;
16340 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
16341 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16342 +          %do i = 2 %to &nvar;
16343 +          %let varname = %sysfunc(varname(&dsid, &i));
16344 +          &varname
16345 +          %end;
16346 +       %end;
16347 +       ;
16348 +      %if &freq ne  %then %do;
16349 +          freq &freq;
16350 +      %end;
16351 +      %if &weight ne  %then %do;
16352 +          weight &weight;
16353 +      %end;
16354 +
16355 +      run;
16356 +      %if &corrmatrix eq Y %then %do;
16357 +      data  &outcorr (drop = _NCL_ _TYPE_);
16358 +           set  &outstat ;
16359 +           if _TYPE_ ='CORR' then output;
16360 +      run;
16361 +      %end;
16362 +    %end;
16363 +    %else %do;
16364 +       proc corr data=&indata outp=&outstat noprint;
16365 +            var
16366 +       %let dsid = %sysfunc(open(&indata));
16367 +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
16368 +          %do i = 1 %to &nvar;
16369 +              %let _name = %sysfunc(varname(&dsid, &i));
16370 +              %if &_name ne &target %then;
16371 +              &_name
16372 +           %end;
16373 +        %let dsid= %sysfunc(close(&dsid));
16374 +        ;
16375 +        with &target;
16376 +        run;
16377 +    %end;
16378 +    quit;
16379 +%mend MakeCorrelation;
16380 +
16381 +
16382 +%macro MakeCorrelationDistance(indata=,
16383 +                               outdata=,
16384 +                               rsquare = N
16385 +                               );
16386 +    data corr_tmp;
16387 +        set &indata;
16388 +        if _N_ = 1 then do;
16389 +           output;
16390 +           stop;
16391 +         end;
16392 +    run;
16393 +    %if &outdata ne  %then %let  _outdata = &outdata;
16394 +    %else %let _outdata = &indata;
16395 +
16396 +    data &_outdata;
16397 +         set &indata;
16398 +
16399 +         %let dsid = %sysfunc(open(work.corr_tmp));
16400 +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
16401 +          %do i = 2 %to &nvar;
16402 +              %let _name = %sysfunc(varname(&dsid, &i));
16403 +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
16404 +              %else  %let _name_md = &_name;
16405 +              &_name = 1- &_name_md;
16406 +          %end;
16407 +      %let dsid= %sysfunc(close(&dsid));
16408 +      run;
16409 +      proc datasets lib = work nolist;
16410 +           delete corr_tmp;
16411 +      run;
16412 +      quit;
16413 +  %mend MakeCorrelationDistance;
16414 +
16415 +
16416 +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
16417 +                                   rsquare = N
16418 +                                   );
16419 +    data corr_tmp;
16420 +        set &indata;
16421 +    run;
16422 +    proc sql noprint;
16423 +           update &indata
16424 +           set
16425 +     %let dsid = %sysfunc(open(work.corr_tmp));
16426 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
16427 +          %do i = 4 %to &nvar;
16428 +          %let _name = %sysfunc(varname(&dsid, &i));
16429 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
16430 +            %else  %let _name_md = &_name;
16431 +            %if &i < &nvar %then %do;
16432 +               &_name = 1- &_name_md ,
16433 +            %end;
16434 +            %else %do;
16435 +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
16436 +            %end;
16437 +          %end;
16438 +      %let dsid= %sysfunc(close(&dsid));
16439 +
16440 +      select * from &indata;
16441 +      run;
16442 +     data &indata( drop = _NCL_);
16443 +           set &indata;
16444 +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
16445 +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
16446 +     run;
16447 +     data &indata(DROP = _NCL_);
16448 +           set &indata;
16449 +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
16450 +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
16451 +           rename _NAME_ = _VAR_;
16452 +     run;
16453 +     proc datasets lib = work nolist;
16454 +           delete corr_tmp;
16455 +     run;
16456 +     quit;
16457 + %mend UpdateOutStatCorrToDistance;
16458 +
16459 +
16460 +%macro HierClusWithCorr(indata= ,
16461 +                        ncluster=,
16462 +                        method = Ward,
16463 +                        outtree = _outtree,
16464 +                        idvar =_VAR_,
16465 +                        outdata=,
16466 +                        rescore = N,
16467 +                        newncluster=
16468 +                        );
16469 +      %global &newncluster;
16470 +      %if &rescore ne Y %then %do;
16471 +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
16472 +                   method=&method outtree=&outtree noprint;
16473 +           id &idvar;
16474 +      run;
16475 +      %end;
16476 +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
16477 +      run;
16478 +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
16479 +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
16480 +      run;
16481 +      data _outcontent;
16482 +          set _outcontent;
16483 +          if NAME in ('_TYPE_' , '_VAR_') then delete;
16484 +          index = 1;
16485 +          rename NAME = _NAME_;
16486 +      run;
16487 +      proc sort data=_outcontent;
16488 +          by _NAME_;
16489 +      run;
16490 +      proc sort data =&outdata;
16491 +           by _NAME_;
16492 +      run;
16493 +      data &outdata(drop=index);
16494 +          merge &outdata _outcontent;
16495 +          by _NAME_;
16496 +          if index = . then delete;
16497 +      run;
16498 +      /*-----------------------------------------------------------*/
16499 +      data &outdata;
16500 +           length CLUSNAME $16;
16501 +           set &outdata;
16502 +           if CLUSTER > &ncluster then delete;
16503 +           CLUSNAME='GC'||strip(CLUSTER);
16504 +           *label CLUSNAME = "Cluster Name";
16505 +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
16506 +           rename _NAME_ = VARIABLE ;
16507 +           *label _NAME_ = "Variable";
16508 +           *label CLUSTER = "Cluster";
16509 +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16510 +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16511 +      run;
16512 +      proc sort data=&outdata out=&outdata;
16513 +           by CLUSTER;
16514 +      run;
16515 +      proc means data =&outdata noprint;
16516 +           output out=_meanout;
16517 +      run;
16518 +      data _null_;
16519 +            set _meanout;
16520 +            if strip(_STAT_) eq 'MAX' then do;
16521 +            call symput("&newncluster", CLUSTER);
16522 +            stop;
16523 +            end;
16524 +      run;
16525 +
16526 +      proc datasets lib = work nolist;
16527 +           delete _outcontent _meanout;
16528 +      run;
16529 +      quit;
16530 +%mend  HierClusWithCorr;
16531 +
16532 +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
16533 +
16534 +     data _tmpindata;
16535 +          set &indata;
16536 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
16537 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
16538 +          if _TYPE_ = 'STD' then _NAME_='STD';
16539 +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
16540 +          DROP _TYPE_ _NCL_;
16541 +     run;
16542 +
16543 +     filename _file_  "&fileRef";
16544 +
16545 +     data _null_;
16546 +        FILE _file_ MOD;
16547 +        put ' ';
16548 +        put "/*-------------------------------------------------*/";
16549 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
16550 +        put "/*-------------------------------------------------*/";
16551 +        put ' ';
16552 +        %let dsid = %sysfunc(open(work._tmpindata));
16553 +
16554 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
16555 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
16556 +        %let k = 1;
16557 +        %do %while(^%sysfunc(fetch(&dsid)));
16558 +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16559 +               %if &k > 2 %then %do;
16560 +                %let cn = %eval(&k-2);
16561 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
16562 +                %end;
16563 +                %let k = %eval(&k+1);
16564 +
16565 +        %end;
16566 +        %let rc = %sysfunc(rewind(&dsid));
16567 +
16568 +        %do j= 2 %to &nvar;
16569 +            %let _varname = %sysfunc(varname(&dsid, &j));
16570 +            %do %while(^%sysfunc(fetch(&dsid)));
16571 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16572 +                %if &_name = MEAN %then
16573 +                %let _mean = %sysfunc(getvarn(&dsid, &j));
16574 +                %else %if &_name = STD %then
16575 +                %let _std = %sysfunc(getvarn(&dsid, &j));
16576 +                %else %do;
16577 +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
16578 +                      %let abscoeff = %sysfunc(abs(&coeff));
16579 +                          %if &abscoeff >  0 %then %do;
16580 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
16581 +                           %end;
16582 +                 %end;
16583 +             %end;
16584 +             %let rc = %sysfunc(rewind(&dsid));
16585 +         %end;
16586 +
16587 +        %let dsid= %sysfunc(close(&dsid));
16588 +
16589 +     run;
16590 +
16591 +     filename _file_;
16592 +     proc datasets lib = work nolist;
16593 +           delete _tmpindata;
16594 +     run;
16595 +     quit;
16596 +%mend CreateScoreCode2;
16597 +
16598 +
16599 +%macro MakeDeltaCode2(groupds=,deltacodefile=);
16600 +
16601 +     /*--- Build Code to Modify Metadata ---*/
16602 +     filename X "&deltacodefile";
16603 +     data _null_;
16604 +        FILE X;
16605 +        set &groupds end=eof;
16606 +        if _N_=1 then do;
16607 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
16608 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
16609 +           %end;
16610 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
16611 +           put "if upcase(strip(NAME)) in (";
16612 +        end;
16613 +        if Strip(upcase(Selected)) eq 'YES' then do;
16614 +           string = '"'!!trim(left(VARIABLE))!!'"';
16615 +           put string;
16616 +        end;
16617 +        if eof then do;
16618 +           put ') then ROLE="INPUT";';
16619 +           put 'else ROLE="REJECTED";';
16620 +           put 'end;';
16621 +
16622 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
16623 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
16624 +           %end;
16625 +        end;
16626 +     run;
16627 +     quit;
16628 +
16629 +     filename X;
16630 +     quit;
16631 +%mend MakeDeltaCode2;
16632 +
16633 +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
16634 +  %global &ngc;
16635 +  data _null_;
16636 +  %if &indata ne %then %do;
16637 +      %let dsid = %sysfunc(open(&indata));
16638 +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
16639 +      %let dsid = %sysfunc(close(&dsid));
16640 +  %end;
16641 +  %else %do;
16642 +       %let nvar = %eval(&ninput+&ndummy); ;
16643 +  %end;
16644 +  %let numgc = %eval(&nvar/&div+2);
16645 +  %let &ngc = &numgc;
16646 +   run;
16647 +  quit;
16648 +%mend getInitialGClusterNumber;
16649 +
16650 +
16651 +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
16652 +data &outlink(drop = Selected);
16653 +     set &indata;
16654 +     LINKID = _N_;
16655 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
16656 +run;
16657 +data &outnode(keep=NODEID TYPE LABEL);
16658 +    set &indata;
16659 +    length TYPE $16;
16660 +    rename VARIABLE = NODEID;
16661 +    *label  CLUSNAME="Node ID";
16662 +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
16663 +    TYPE = "VARIABLE";
16664 +    *label TYPE = "Node Type";
16665 +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
16666 +    run;
16667 +data _tmp(keep=NODEID TYPE LABEL);
16668 +    set &indata;
16669 +    length TYPE $16;
16670 +    rename CLUSNAME = NODEID;
16671 +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
16672 +    TYPE = "GCLUSTER";
16673 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
16674 +    run;
16675 +proc sort data=_tmp;
16676 +    by NODEID;
16677 +run;
16678 +data _tmp;
16679 +    set _tmp; by NODEID;
16680 +    if first.NODEID then output;
16681 +run;
16682 +proc sort data=&outnode;
16683 +    by NODEID;
16684 +run;
16685 +data  &outnode;
16686 +    set _tmp &outnode;
16687 +run;
16688 +proc datasets lib = work nolist;
16689 +     delete _tmp;
16690 +run;
16691 +quit;
16692 +%mend MakeGobalConstellData;
16693 +
16694 +/* Make contellation plot data among GCLUSTERS */
16695 +
16696 +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
16697 +
16698 +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
16699 +     set &indata;
16700 +     LINKID = _N_;
16701 +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
16702 +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
16703 +     end;
16704 +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
16705 +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
16706 +     end;
16707 +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
16708 +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
16709 +    end;
16710 +run;
16711 +
16712 +data _tmp_outrsquare;
16713 +        set &inoutrsq;
16714 +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
16715 +run;
16716 +
16717 +proc freq data =_tmp_outrsquare noprint;
16718 +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
16719 +run;
16720 +
16721 +data &outnode(keep=_NAME_ TYPE LABEL);
16722 +    set &outlink;
16723 +    length TYPE $16;
16724 +    length LABEL $100;
16725 +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
16726 +
16727 +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
16728 +    TYPE = "GCLUSTER";
16729 +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
16730 +    end;
16731 +    else do;
16732 +    TYPE= "ROOT";
16733 +    LABEL= _NAME_;
16734 +    end;
16735 +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
16736 +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
16737 +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
16738 +    run;
16739 +
16740 +proc sort data=&outnode;
16741 +     by _NAME_;
16742 +proc sort data=_tmp_GCLUSFREQ;
16743 +     by _NAME_;
16744 +run;
16745 +
16746 +data  &outnode;
16747 +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
16748 +     if COUNT=. then COUNT=1;
16749 +run;
16750 +
16751 +proc datasets lib = work nolist;
16752 +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
16753 +run;
16754 +
16755 +quit;
16756 +%Mend MakeGClusterConstData;
16757 +
16758 +
16759 +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
16760 +
16761 +    data _gscoretmpds;
16762 +          set &indata;
16763 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
16764 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
16765 +          if _TYPE_ = 'STD' then _NAME_='STD';
16766 +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
16767 +          DROP _TYPE_ _NCL_;
16768 +     run;
16769 +
16770 +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
16771 +        GCluster Component &globalclusid ------ */
16772 +
16773 +    filename _file_  "&fileref";
16774 +
16775 +    data _null_;
16776 +        %if &globalclusid eq 1 %then %do;
16777 +          FILE _file_;
16778 +        %end;
16779 +        %else %do;
16780 +          FILE _file_ MOD;
16781 +        %end;
16782 +
16783 +        %let dsid = %sysfunc(open(work._gscoretmpds));
16784 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
16785 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
16786 +
16787 +        %let k = 1;
16788 +        %do %while(^%sysfunc(fetch(&dsid)));
16789 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16790 +                %if &k > 2 %then %do;
16791 +                put "&_name = 0 ; ";
16792 +                %end;
16793 +                %let k = %eval(&k+1);
16794 +        %end;
16795 +
16796 +        %let rc = %sysfunc(rewind(&dsid));
16797 +        %do i= 2 %to &nvar;
16798 +            %let _varname =  %sysfunc(varname(&dsid, &i));
16799 +            %do %while(^%sysfunc(fetch(&dsid)));
16800 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16801 +                %if &_name = MEAN %then
16802 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
16803 +                %else %if &_name = STD %then
16804 +                %let _std = %sysfunc(getvarn(&dsid, &i));
16805 +                %else %do;
16806 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
16807 +                      %let abscoeff = %sysfunc(abs(&coeff));
16808 +                          %if &abscoeff >  0 %then %do;
16809 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
16810 +                           %end;
16811 +                 %end;
16812 +             %end;
16813 +             %let rc = %sysfunc(rewind(&dsid));
16814 +
16815 +         %end;
16816 +
16817 +        %let dsid= %sysfunc(close(&dsid));
16818 +       run;
16819 +
16820 +
16821 +       proc datasets lib=work nolist;
16822 +            delete _gscoretmpds;
16823 +       run;
16824 +      quit;
16825 +
16826 +%mend CreateGClusterScoreCode;
16827 +
16828 +
16829 +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
16830 +
16831 +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
16832 +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
16833 +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
16834 +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
16835 +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
16836 +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
16837 +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
16838 +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
16839 +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
16840 +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
16841 +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
16842 +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
16843 +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
16844 +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
16845 +
16846 +   filename gsfile "&gscorecode";
16847 +
16848 +   data &EM_USER_GSCORE;
16849 +             set &indata;
16850 +             %include  gsfile;
16851 +        keep
16852 +        %do i=1 %to &ngcluster;
16853 +         %let gcvarname = GC&i;
16854 +         &gcvarname
16855 +        %end;
16856 +     ;
16857 +   run;
16858 +
16859 +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
16860 +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
16861 +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
16862 +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
16863 +    noprint  ;
16864 +     var
16865 +       %do i=1 %to &ngcluster;
16866 +         %let gcvarname = GC&i;
16867 +         &gcvarname
16868 +        %end;
16869 +   ;
16870 +   run;
16871 +
16872 +
16873 +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
16874 +   data &EM_USER_GSCORECORRPLOT ;
16875 +        set &EM_USER_GSCORECORRPLOT;
16876 +        rename _X_ = X;
16877 +        rename _Y_ = Y;
16878 +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16879 +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16880 +   run;
16881 +
16882 +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
16883 +
16884 +   data &EM_USER_GSCORETREE;
16885 +        length _NAME_ $32;
16886 +        length _LABEL_ $100;
16887 +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
16888 +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
16889 +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
16890 +        end;else do;
16891 +         _LABEL_ = _NAME_;
16892 +        end;
16893 +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
16894 +
16895 +   run;
16896 +
16897 +   quit;
16898 +
16899 +%mend MakeGClusterCorrelation;
16900 +
16901 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN.SOURCE.
16902 +
16903 +
16904 +%macro train;
16905 +
16906 +   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
16907 +   %include temp;
16908 +   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
16909 +   %include temp;
16910 +   filename temp catalog 'sashelp.emutil.em_copyfile.source';
16911 +   %include temp;
16912 +   filename temp;
16913 +
16914 +   %let VARCLUS_MAXNUMOBS = 100000;
16915 +   %let VARCLUS_MAXNUMVAR = 200;
16916 +   %let trainnum = 0;
16917 +   %let error = 0;
16918 +
16919 +   %if &EM_IMPORT_DATA eq %then %do;
16920 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
16921 +       %let  error = 1;
16922 +       %goto endtrain;
16923 +   %end;
16924 +
16925 +    %if (%sysfunc(exist(&EM_IMPORT_DATA)) or %sysfunc(exist(&EM_IMPORT_DATA, VIEW))) < 1 %then %do;
16926 +        %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
16927 +        %let  error = 1;
16928 +        %goto endline;
16929 +    %end;
16930 +
16931 +   %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
16932 +   %let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
16933 +   %let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
16934 +   %let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
16935 +   %let _num_input_class = %eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
16936 +   %let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
16937 +
16938 +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) %then %do;
16939 +        %if  &_num_input_total < 2 %then %do;
16940 +            %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
16941 +            %let error = 2;
16942 +            %goto endtrain;
16943 +        %end;
16944 +   %end;
16945 +   %else %do;
16946 +         %if  &_num_input_interval < 2 %then %do;
16947 +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
16948 +         %let error = 2;
16949 +         %goto endtrain;
16950 +         %end;
16951 +   %end;
16952 +
16953 +   %em_checkerror();
16954 +
16955 +   %if &EMEXCEPTIONSTRING ne %then %do;
16956 +       %goto endtrain;
16957 +   %end;
16958 +
16959 +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) and (&_num_input_class > 0) %then %do;
16960 +
16961 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
16962 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
16963 +                             outvar=&EM_USER_OUTDUMMY,
16964 +                             outdata=_newtrainds,
16965 +                             fileref=&EM_FILE_EMFLOWSCORECODE);
16966 +
16967 +       %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
16968 +           %getNObs(inds=_newtrainds, nobs=_varclus_nobs);
16969 +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
16970 +                proc datasets lib=work nolist;
16971 +                delete  _newtrainds;
16972 +                run;
16973 +                quit;
16974 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
16975 +                %let error = 3;
16976 +               %goto endtrain;
16977 +            %end;
16978 +        %end;
16979 +
16980 +        %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
16981 +             %getNVar(inds=_newtrainds, nvar=_nvar);
16982 +
16983 +            %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;
16984 +                %let trainnum = 2;
16985 +            %end;
16986 +            %else %do;
16987 +                %let trainnum = 1;
16988 +            %end;
16989 +        %end;
16990 +    %end;
16991 +    %else %do;
16992 +
16993 +          %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
16994 +
16995 +            %getNObs(inds=&EM_IMPORT_DATA, nobs=_varclus_nobs);
16996 +
16997 +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
16998 +
16999 +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
17000 +                  %let error = 3;
17001 +                 %goto endtrain;
17002 +            %end;
17003 +        %end;
17004 +
17005 +
17006 +         %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
17007 +            /*%getNVar(inds=&EM_IMPORT_DATA, nvar=_nvar);
17008 +              %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;*/
17009 +            %if &EM_NUM_INTERVAL_INPUT > &VARCLUS_MAXNUMVAR %then %do;
17010 +                %let trainnum = 2;
17011 +            %end;
17012 +            %else %do;
17013 +                %let trainnum = 1;
17014 +            %end;
17015 +        %end;
17016 +
17017 +   %end;
17018 +
17019 +    %em_checkerror();
17020 +
17021 +    %if &EMEXCEPTIONSTRING ne %then %do;
17022 +       %let error = 4;
17023 +       %goto endtrain;
17024 +    %end;
17025 +
17026 +    %CreateVarclusMeta(trainnum=&trainnum);
17027 +
17028 +    %if &error > 0 %then  %goto endtrain;
17029 +
17030 +       /* when only EM_PROPERTY_TWOSTAGECLUS eq AUTO &_triannum will be 1 or 2  */
17031 +
17032 +       %if (&trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
17033 +           %train1;
17034 +       %end;
17035 +       %if (&trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
17036 +           %train2;
17037 +       %end;
17038 +
17039 +      filename _in  "&EM_FILE_EMFLOWSCORECODE";
17040 +      filename _out "&EM_FILE_EMPUBLISHSCORECODE";
17041 +      %em_copyfile(infref=_in, outfref=_out);
17042 +      filename _in;
17043 +      filename _out;
17044 +
17045 +
17046 +   %endtrain:
17047 +
17048 +
17049 +%mend train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN1.SOURCE.
17051 +%macro VarClus(indata=,
17052 +               outstat=,
17053 +               outtree=,
17054 +               vars=,
17055 +               freq=,
17056 +               weight=,
17057 +               includeclassvar=
17058 +               );
17060 +   %if &vars eq %then
17061 +       %let vars = %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED;
17063 +        /*Add by ruzhan, May 28, 2013*/
17064 +        ods graphics on;
17065 +        %let odspath =;
17066 +        data _null_;
17067 +            path = pathname('WORK');
17068 +            call symput('odspath', path);
17069 +        run;
17070 +        ods listing gpath="&odspath";
17071 +        ods output DENDROGRAM=&outtree;
17072 +       proc varclus data = &indata outstat= &outstat
17073 +        %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
17074 +        %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
17075 +        %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
17076 +        /*-----------------------
17077 +        %if %upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT %then %do;
17078 +            %let maxc = %sysevalf(&EM_PROPERTY_MAXCLUS, int);
17079 +            %if &maxc > 1 %then %do;     maxc=&maxc %end;
17080 +       %end;
17081 +       -------------------------*/
17082 +       %if (&EM_PROPERTY_MAXCLUS ne . )  and (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) %then %do;
17083 +            maxc = &EM_PROPERTY_MAXCLUS
17084 +       %end;
17086 +       /*------------------------------------------------------------------------------------------------------
17087 +        (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) is needed because of diagram conversion from Em12.1 to 12.3
17088 +        ------------------------------------------------------------------------------------------------------*/
17090 +       %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and
17091 +           ( ( &EM_PROPERTY_MAXEIGEN ne . )  and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT) ) %then %do;
17092 +            maxeigen = &EM_PROPERTY_MAXEIGEN
17093 +       %end;
17095 +       %if &EM_PROPERTY_PROPORTION ne 0  and (%upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT) %then %do;
17096 +            proportion = &EM_PROPERTY_PROPORTION
17097 +       %end;
17098 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
17099 +               summary
17100 +       %end;
17102 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
17103 +           short
17104 +       %end;
17105 +        %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
17106 +           corr trace simple
17107 +       %end;
17108 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
17109 +          noprint
17110 +       %end;
17111 +        /*Comment out by ruzhan, May 28, 2013*/
17112 +       /*       outtree=&outtree*/
17113 +       ;
17114 +        var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
17116 +      %if &includeclassvar eq Y %then %do;
17117 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
17118 +          %if &dsid > 0 %then %do;
17119 +             %let nvar = %sysfunc(attrn(&dsid, NVAR));
17120 +              %do i = 2 %to &nvar;
17121 +                  %let varname = %sysfunc(varname(&dsid, &i));
17122 +                   &varname
17123 +              %end;
17125 +          %end;
17126 +      %end;
17128 +      ;
17129 +      /*------------------------
17130 +      %if &freq ne  %then %do;
17131 +          freq &freq;
17132 +      %end;
17133 +      %if &weight ne  %then %do;
17134 +          weight &weight;
17135 +      %end;
17136 +      ----------------------------*/
17137 +      %if %EM_FREQ ne %then %do;
17138 +           Freq %EM_FREQ;
17139 +      %end;
17140 +      ;
17141 +    run;
17142 +    ods graphics off;
17143 +    %endline:
17144 +    quit;
17145 +%mend VarClus;
17147 +%macro Train1;
17149 +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
17150 +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
17151 +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
17152 +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
17153 +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
17154 +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
17155 +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
17156 +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
17157 +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
17158 +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
17159 +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
17160 +   %EM_GETNAME(key=OUTLINK, type=DATA) ;
17161 +   %EM_GETNAME(key=OUTNODE, type=DATA) ;
17163 +   /*
17164 +     %let VARCLUS_MAXNUMOBS = 100;
17165 +     %let VARCLUS_MAXNUMVAR = 200;
17166 +   */
17168 +   /* Train
17170 +   %if &EM_IMPORT_DATA eq %then %do;
17171 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17172 +       %goto endtrain1;
17173 +   %end;
17175 +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
17176 +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
17177 +        %goto endtrain1;
17178 +   %end;
17179 +   */
17180 +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17181 +       /* moved this to pretrain ------------
17183 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
17184 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
17185 +                             outvar=&EM_USER_OUTDUMMY,
17186 +                             outdata=_newtrainds,
17187 +                             fileref=&EM_FILE_EMFLOWSCORECODE);
17189 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17190 +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
17191 +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
17192 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
17193 +                %goto endtrain;
17194 +            %end;
17195 +        %end;
17197 +        +-------------------------------------*/
17199 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
17200 +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
17201 +          There is no _newtrainds */
17202 +         %VarClus( indata=&EM_IMPORT_DATA,
17203 +                  outstat=&EM_USER_OUTSTAT,
17204 +                  outtree = &EM_USER_OUTTREE,
17205 +                  includeclassvar=N
17206 +                 );
17207 +        %end;
17208 +        %else %do;
17209 +        %VarClus( indata=_newtrainds,
17210 +                  outstat=&EM_USER_OUTSTAT,
17211 +                  outtree = &EM_USER_OUTTREE,
17212 +                  includeclassvar=Y
17213 +                 );
17214 +         proc datasets lib=work nolist;
17215 +              delete  _newtrainds;
17216 +         run;
17217 +         %end;
17218 +    %end;
17219 +    %else %do;
17221 +        /*----- moved this to pretrain ------------
17222 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17223 +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
17224 +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
17225 +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
17226 +                 %goto endtrain;
17227 +            %end;
17228 +        %end;
17229 +        +-------------------------------------*/
17231 +        %VarClus(indata=&EM_IMPORT_DATA,
17232 +                  outstat=&EM_USER_OUTSTAT,
17233 +                  outtree =&EM_USER_OUTTREE,
17234 +                  includeclassvar=N
17235 +               );
17237 +   %end;
17239 +   %em_checkerror();
17241 +   %if &EMEXCEPTIONSTRING ne %then %do;
17242 +       %goto endtrain1;
17243 +   %end;
17244 +    /*
17245 +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
17246 +    */
17248 +    %getNclusfromTrain(inoutstat=&EM_USER_OUTSTAT, nc=_nclus);
17250 +    %let gid=;
17252 +    /*--- To make the main result table ----------------------*/
17254 +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORR, ncluster=&_nclus, RSquare=Y);
17255 +    %FindNextClosestClusByCluster(indata=&EM_USER_OUTCLUSCORR, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
17256 +    %MakeOwnRSquare(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
17257 +    %MakeClusStructCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSSTRUCT , ncluster=&_nclus, Rsquare=Y);
17258 +    %FindNextClosestClusByVar(indata=&EM_USER_OUTCLUSSTRUCT, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
17259 +    %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&EM_USER_OUTRSQUARE, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
17261 +   /* Inter Cluster Correlation Plot ------------------------*/
17263 +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORRPLOT, ncluster=&_nclus, RSquare=N);
17264 +    %MakePlotDataFromCorrTable(indata=&EM_USER_OUTCLUSCORRPLOT, outdata=&EM_USER_OUTCLUSCORRPLOT, globalclusid=&gid);
17266 +   /* Create some other data sets for results ----*/
17268 +   %MakeStatPlotData(statds=&EM_USER_OUTSTAT , outstatplotds=&EM_USER_OUTSTATPLOT);
17269 +   %MakeVarClusCorrData(statds=&EM_USER_OUTSTAT, corrds=&EM_USER_OUTCORR, corrplotds=&EM_USER_OUTCORRPLOT);
17270 +   %MakeClusConstellData(indata=&EM_USER_OUTRSQUARE, outlink=&EM_USER_OUTLINK, outnode=&EM_USER_OUTNODE);
17272 +  /*---- move this to Score action ------------
17273 +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
17274 +   */
17276 +   /* create score code at training time */
17277 +   %CreateScoreCode(indata=&EM_USER_OUTSTAT, ncluscomp=&_nclus, fileref=&EM_FILE_EMFLOWSCORECODE);
17278 +   %endtrain1:
17279 +%mend Train1;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN2.SOURCE.
17282 +%macro VarClus2( indata=,
17283 +                 outdata=,
17284 +                 outstat =outstat,
17285 +                 outrsquare=outrsquare,
17286 +                 outtree = outtree,
17287 +                 outclusstruct = outclusstruct,
17288 +                 outcluscorr =outcluscorr,
17289 +                 outcluscorrplot =outcluscorrplot,
17290 +                 outclusrsquare =outclusrsquare,
17291 +                 outstatplot = outstatplot,
17292 +                 outcorr = outcorr,
17293 +                 outcorrplot = outcorrplot,
17294 +                 clusdata=,
17295 +                 outnode=outnode,
17296 +                 outlink=outlink,
17297 +                 ngroup =1  );
17298 +         %if (%sysfunc(exist(&indata)) or %sysfunc(exist(&indata, VIEW))) < 1 %then %do;
17299 +              %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17300 +              %goto endline;
17301 +         %end;
17303 +        %global numglobalcluster;
17304 +        %let  numglobalcluster = &ngroup;
17305 +        %let  gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
17306 +        %do vci =1 %to &ngroup;
17307 +           data tmp_clusdata;
17308 +                set &clusdata;
17309 +                if CLUSTER ne &vci then delete;
17310 +           run;
17311 +           %let outstatds = &outstat.&vci;
17312 +           %let outrsquareds = &outrsquare.&vci;
17313 +           %let outtreeds = &outtree.&vci;
17314 +           %let outclusstuctds = &outclusstruct.&vci;
17315 +           %let outcluscorrds = &outcluscorr.&vci;
17316 +           %let outcluscorrplotds = &outcluscorrplot.&vci;
17317 +           %let outclusrsquareds = &outclussquare.&vci;
17318 +           %let outstatplotds = &outstatplot.&vci;
17319 +           %let outcorrds = &outcorr.&vci;
17320 +           %let outcorrplotds = &outcorrplot.&vci;
17321 +           %let outnodeds = &outnode.&vci;
17322 +           %let outlinkds = &outlink.&vci;
17324 +           %EM_REGISTER(KEY=&outstatds, TYPE=DATA);
17325 +           %EM_GETNAME(KEY=&outstatds, TYPE=DATA);
17326 +           %let emuseroutstat = &EM_USER_&outstatds;
17328 +           %EM_REGISTER(KEY=&outtreeds, TYPE=DATA);
17329 +           %EM_GETNAME(KEY=&outtreeds, TYPE=DATA);
17330 +           %let emuserouttree = &EM_USER_&outtreeds;
17332 +           %EM_REGISTER(KEY=&outcluscorrds, TYPE=DATA);
17333 +           %EM_GETNAME(KEY=&outcluscorrds, TYPE=DATA);
17334 +           %let emuseroutcluscorr = &EM_USER_&outcluscorrds;
17336 +           %EM_REGISTER(KEY=&outclusstuctds, TYPE=DATA);
17337 +           %EM_GETNAME(KEY=&outclusstuctds, TYPE=DATA);
17338 +           %let emuseroutclusstruct = &EM_USER_&outclusstuctds;
17340 +           %EM_REGISTER(KEY=&outrsquareds, TYPE=DATA);
17341 +           %EM_GETNAME(KEY=&outrsquareds, TYPE=DATA);
17342 +           %let emuseroutrsquare = &EM_USER_&outrsquareds;
17344 +           %EM_REGISTER(KEY=&outcluscorrplotds, TYPE=DATA);
17345 +           %EM_GETNAME(KEY=&outcluscorrplotds, TYPE=DATA);
17346 +           %let emuseroutcluscorrplot = &EM_USER_&outcluscorrplotds;
17348 +           %EM_REGISTER(KEY=&outstatplotds, TYPE=DATA);
17349 +           %EM_GETNAME(KEY=&outstatplotds, TYPE=DATA);
17350 +           %let emuseroutstatplot = &EM_USER_&outstatplotds;
17352 +           %EM_REGISTER(KEY=&outcorrds, TYPE=DATA);
17353 +           %EM_GETNAME(KEY=&outcorrds, TYPE=DATA);
17354 +           %let emuseroutcorr = &EM_USER_&outcorrds;
17356 +           %EM_REGISTER(KEY=&outcorrplotds, TYPE=DATA);
17357 +           %EM_GETNAME(KEY=&outcorrplotds, TYPE=DATA);
17358 +           %let emuseroutcorrplot = &EM_USER_&outcorrplotds;
17360 +           %EM_REGISTER(KEY=&outnodeds, TYPE=DATA);
17361 +           %EM_GETNAME(KEY=&outnodeds, TYPE=DATA);
17362 +           %let emuseroutnode = &EM_USER_&outnodeds;
17364 +           %EM_REGISTER(KEY=&outlinkds, TYPE=DATA);
17365 +           %EM_GETNAME(KEY=&outlinkds, TYPE=DATA);
17366 +           %let emuseroutlink = &EM_USER_&outlinkds;
17368 +           /*Add by ruzhan, May 28, 2013*/
17369 +           ods graphics on;
17370 +            %let odspath =;
17371 +            data _null_;
17372 +                path = pathname('WORK');
17373 +                call symput('odspath', path);
17374 +            run;
17375 +            ods listing gpath="&odspath";
17377 +           ods output DENDROGRAM=&emuserouttree;
17379 +           proc varclus data=&indata outstat=&emuseroutstat
17380 +            %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
17381 +            %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
17382 +            %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
17383 +            %if (&EM_PROPERTY_MAXCLUS ne .)  and (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) %then %do;
17384 +                  maxc=&EM_PROPERTY_MAXCLUS
17385 +           %end;
17387 +            %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and
17388 +                ( (&EM_PROPERTY_MAXEIGEN ne .)  and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT)) %then %do;
17389 +            maxeigen = &EM_PROPERTY_MAXEIGEN
17390 +            %end;
17392 +           %if (&EM_PROPERTY_PROPORTION ne 0)  and (%upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT) %then %do;
17393 +                proportion = &EM_PROPERTY_PROPORTION
17394 +           %end;
17395 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
17396 +               summary
17397 +           %end;
17398 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
17399 +               short
17400 +           %end;
17401 +            %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
17402 +               corr trace simple
17403 +           %end;
17404 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
17405 +               noprint
17406 +           %end;
17407 +            /*Comment out by ruzhan, May 28, 2013*/
17408 +              /*outtree=&emuserouttree*/
17409 +           ;
17410 +           var
17411 +           %let dsid=%sysfunc(open(work.tmp_clusdata));
17412 +           %let vn_name =%sysfunc(varnum(&dsid, VARIABLE));
17413 +                %do %while(^%sysfunc(fetch(&dsid)));
17414 +                    %let _varname= %sysfunc(getvarc(&dsid, &vn_name));
17415 +                    &_varname
17416 +                %end;
17417 +            %let dsid = %sysfunc(close(&dsid));
17418 +           ;
17419 +           %if %EM_FREQ ne %then %do;
17420 +           Freq %EM_FREQ;
17421 +           %end;
17422 +           run;
17423 +            ods graphics off;
17424 +            %getNclusfromTrain(inoutstat=&emuseroutstat, nc=_nclus);
17426 +            %let gid=&vci;
17427 +            /*--- To make the main result table ----------------------*/
17428 +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorr, ncluster=&_nclus, RSquare=Y);
17429 +            %FindNextClosestClusByCluster(indata=&emuseroutcluscorr, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
17430 +            %MakeOwnRSquare(indata=&emuseroutstat, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
17431 +            %MakeClusStructCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutclusstruct , ncluster=&_nclus, Rsquare=Y);
17432 +            %FindNextClosestClusByVar(indata=&emuseroutclusstruct, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
17433 +            %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&emuseroutrsquare, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
17435 +            /* Inter Cluster Correlation Plot ------------------------*/
17437 +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorrplot, ncluster=&_nclus, RSquare=N);
17438 +            %MakePlotDataFromCorrTable(indata=&emuseroutcluscorrplot, outdata=&emuseroutcluscorrplot, globalclusid=&gid);
17440 +           /* Create some other data sets for results ---------------*/
17442 +           %MakeStatPlotData(statds=&emuseroutstat , outstatplotds=&emuseroutstatplot);
17443 +           %MakeVarClusCorrData(statds=&emuseroutstat, corrds=&emuseroutcorr, corrplotds=&emuseroutcorrplot);
17444 +           %MakeClusConstellData(indata=&emuseroutrsquare, outlink=&emuseroutlink, outnode=&emuseroutnode);
17446 +           %CreateScoreCode2(indata=&emuseroutstat, ncluscomp=&_nclus, globalclusid=&gid, fileref=&EM_FILE_EMFLOWSCORECODE);
17448 +           %CreateGClusterScoreCode(indata=&emuseroutstat,  globalclusid=&gid, fileref=&gscorefile);
17450 +           %if &vci = 1 %then %do;
17451 +           data &EM_USER_OUTRSQUARE;
17452 +                set &emuseroutrsquare;
17453 +           run;
17454 +           %end;
17455 +           %else %do;
17456 +           data &EM_USER_OUTRSQUARE;
17457 +                set &EM_USER_OUTRSQUARE &emuseroutrsquare;
17458 +           run;
17459 +           %end;
17460 +           quit;
17461 +       %end;
17463 +       /*---- move this to Score action ------------
17464 +       %MakeDeltaCode2(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
17465 +       */
17467 +       /* Make Score Gcluster component & correlation  */
17468 +       %MakeGClusterCorrelation(Indata=&indata, ngcluster=&ngroup, gscorecode=&gscorefile, outrsquare=&EM_USER_OUTRSQUARE);
17470 +       quit;
17471 +       %endline:
17472 +%mend VarClus2;
17475 +%macro Train2;
17477 +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
17478 +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
17479 +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
17480 +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
17481 +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
17482 +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
17483 +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
17484 +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
17485 +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
17486 +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
17487 +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
17488 +   %EM_GETNAME(key=GOUTSTAT, type=DATA) ;
17489 +   %EM_GETNAME(key=GOUTTREE, type=DATA) ;
17490 +   %EM_GETNAME(key=GOUTCORR, type=DATA) ;
17491 +   %EM_GETNAME(key=GOUTGROUP, type=DATA) ;
17492 +   %EM_GETNAME(key=GOUTNODE, type=DATA) ;
17493 +   %EM_GETNAME(key=GOUTLINK, type=DATA) ;
17494 +   %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
17498 +    /* Train */
17500 +   /* moved to pretrain ------------
17502 +   %if &EM_IMPORT_DATA eq %then %do;
17503 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17504 +       %goto endtrain2;
17505 +   %end;
17507 +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
17508 +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
17509 +        %goto endtrain2;
17510 +   %end;
17511 +   +-------------------------------------------*/
17513 +    %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
17516 +    %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17518 +        /*----- moved to pretrain ------------
17520 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
17521 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
17522 +                             outvar=&EM_USER_OUTDUMMY,
17523 +                             outdata=_newtrainds,
17524 +                             fileref=&EM_FILE_EMFLOWSCORECODE,
17525 +                              ndummyvars=_ndummyvars
17526 +                            );
17528 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17529 +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
17530 +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
17531 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
17532 +                %goto endtrain;
17533 +            %end;
17534 +        %end;
17536 +        +---------------------------------------*/
17537 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
17538 +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
17539 +          There is no _newtrainds */
17540 +        %MakeCorrelation(    indata=&EM_IMPORT_DATA,
17541 +                             outstat=&EM_USER_GOUTSTAT,
17542 +                             corrmatrix=Y,
17543 +                             outcorr=&EM_USER_GOUTCORR,
17544 +                             includeclassvar=N,
17545 +                             freq =%EM_FREQ
17546 +                          );
17547 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
17549 +        %end;
17550 +        %else %do;
17551 +         %MakeCorrelation(   indata=_newtrainds,
17552 +                             outstat=&EM_USER_GOUTSTAT,
17553 +                             corrmatrix=Y,
17554 +                             outcorr=&EM_USER_GOUTCORR,
17555 +                             includeclassvar=Y,
17556 +                             freq =%EM_FREQ
17557 +                          );
17558 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ndummy=&_ndummyvars, ngc=_ngc);
17560 +        %end;
17562 +    %end;
17563 +    %else %do;
17565 +        /* moved to pretrain -------------------
17567 +         %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17568 +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
17569 +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
17570 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
17571 +                %goto endtrain;
17572 +            %end;
17573 +        %end;
17574 +         +------------------------------------------*/
17576 +        %MakeCorrelation( indata=&EM_IMPORT_DATA,
17577 +                          outstat=&EM_USER_GOUTSTAT,
17578 +                          corrmatrix=Y,
17579 +                          outcorr=&EM_USER_GOUTCORR,
17580 +                          includeclassvar=N,
17581 +                          freq =%EM_FREQ
17582 +                          );
17583 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
17584 +    %end;
17586 +   %UpdateOutStatCorrToDistance(indata=&EM_USER_GOUTSTAT, /* indata should be a outstat from proc varclus */
17587 +                                rsquare = N
17588 +                                );
17589 +   %HierClusWithCorr( indata=&EM_USER_GOUTSTAT ,
17590 +                      ncluster=&_ngc,
17591 +                      method = Ward,
17592 +                      outtree =&EM_USER_GOUTTREE,
17593 +                      idvar = _VAR_,
17594 +                      outdata=&EM_USER_GOUTGROUP,
17595 +                      rescore = N,
17596 +                      newncluster=_newnclus
17597 +                        );
17599 +   /* store the number of global cluster */
17601 +   data &EM_USER_VARCLUSMETA;
17602 +        set &EM_USER_VARCLUSMETA;
17603 +        NGCluster = &_newnclus;
17604 +   run;
17606 +   %MakeGobalConstellData(indata=&EM_USER_GOUTGROUP, outlink=&EM_USER_GOUTLINK, outnode=&EM_USER_GOUTNODE);
17608 +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17609 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
17610 +            %VarClus2(indata=&EM_IMPORT_DATA,
17611 +                 clusdata=&EM_USER_GOUTGROUP,
17612 +                 ngroup=&_newnclus);
17613 +         %end;
17614 +         %else %do;
17615 +             %VarClus2(indata=_newtrainds,
17616 +                 clusdata=&EM_USER_GOUTGROUP,
17617 +                 ngroup=&_newnclus);
17619 +         %end;
17621 +   %end;
17622 +   %else %do;
17623 +       %VarClus2(indata=&EM_IMPORT_DATA,
17624 +                 clusdata=&EM_USER_GOUTGROUP,
17625 +                 ngroup=&_newnclus);
17626 +   %end;
17628 +   %em_checkerror();
17629 +   %if &EMEXCEPTIONSTRING ne %then %do;
17630 +       %put &em_codebar;
17631 +       %put Error: Variable clustering failed.;
17632 +       %put &em_codebar;
17633 +       %goto endtrain2;
17634 +   %end;
17635 +   /*
17636 +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
17637 +   */
17638 +   %endtrain2:
17639 +%mend Train2;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_COPYFILE.SOURCE.
17641 +%macro em_copyfile(infref=, outfref=, append=N);
17642 +
17643 +   %if %sysfunc(fileref(&infref))=0 and %sysfunc(fileref(&outfref))<=0 %then %do;
17644 +
17645 +       %let omode =;
17646 +       %if &append=Y %then
17647 +           %let omode = MOD;
17648 +       data _null_;
17649 +          length line $20000;
17650 +          file &outfref &omode lrecl=20000;
17651 +          fid=fopen("&infref",'i',20000,'v');
17652 +          if fid > 0  then do;
17653 +             do while(^fread(fid));
17654 +                rlen = frlen(fid);
17655 +                rc= fget(fid,line,20000);
17656 +                start = length(line)-length(left(line))+1;
17657 +                line=strip(line);
17658 +                put @start line;
17659 +             end;
17660 +             if fid > 0  then rc=fclose(fid);
17661 +          end;
17662 +       run;
17663 +
17664 +   %end;
17665 +%mend em_copyfile;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
17666  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1:97
NOTE: There were 98819 observations read from the data set EMWS1.SMPL2_DATA.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
17667  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set EMWS1.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: Variable num_out_cmds is constant.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
WARNING: The DENDROGRAM will not be drawn because multiple roots were found.
NOTE: The data set EMWS1.VARCLUS_OUTTREE has 51 observations and 3 variables.
NOTE: The data set EMWS1.VARCLUS_OUTSTAT has 252 observations and 37 variables.
NOTE: The PROCEDURE VARCLUS printed page 2.
NOTE: PROCEDURE VARCLUS used (Total process time):
      real time           1.30 seconds
      cpu time            0.23 seconds
 
 
 
17668  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      5:214
NOTE: There were 252 observations read from the data set EMWS1.VARCLUS_OUTSTAT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      7:15
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      7:9
NOTE: There were 252 observations read from the data set EMWS1.VARCLUS_OUTSTAT.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSCORR has 10 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 10 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSCORR has 10 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 10 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSCORR has 10 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK._TMPCLUSRSQ has 10 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 100 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 100 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 100 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 100 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 90 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 90 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 10 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      2:77
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      2:71
NOTE: There were 252 observations read from the data set EMWS1.VARCLUS_OUTSTAT.
NOTE: The data set WORK._TMPDS has 2 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMPDS.
NOTE: The data set WORK._OWNRSQ has 34 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12:35
NOTE: Variable GCluster is uninitialized.
NOTE: There were 34 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 34 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 34 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 34 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMPDS (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      4:40
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      4:34
NOTE: Variable GCluster is uninitialized.
NOTE: There were 252 observations read from the data set EMWS1.VARCLUS_OUTSTAT.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSSTRUCT has 10 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set EMWS1.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK.CORR_TMP has 10 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set EMWS1.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSSTRUCT has 10 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set EMWS1.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK._TMPCLUSRSQ has 10 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 340 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 340 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 340 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 340 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 306 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 306 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 306 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 306 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 34 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 34 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 34 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 34 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 34 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 34 observations read from the data set WORK._OWNRSQ.
NOTE: There were 34 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set EMWS1.VARCLUS_OUTRSQUARE has 34 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 10 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 34 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS1.VARCLUS_OUTRSQUARE has 34 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 10 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 34 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: There were 10 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set EMWS1.VARCLUS_OUTRSQUARE has 44 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 44 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS1.VARCLUS_OUTRSQUARE has 44 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      47491:90
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      47491:84
NOTE: There were 252 observations read from the data set EMWS1.VARCLUS_OUTSTAT.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSCORRPLOT has 10 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set WORK.CORR_TMP has 10 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSCORRPLOT has 10 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSCORRPLOT has 10 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSCORRPLOT has 100 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 100 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSCORRPLOT has 100 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS1.VARCLUS_OUTSTAT.
      WHERE _type_ in ('MEAN', 'N', 'STD');
NOTE: The data set WORK.VARCLUS_TMP has 3 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.VARCLUS_TMP.
NOTE: The data set EMWS1.VARCLUS_OUTSTATPLOT has 34 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 34 observations read from the data set EMWS1.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTSTATPLOT has 34 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 34 observations read from the data set EMWS1.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTSTATPLOT has 34 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.VARCLUS_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 34 observations read from the data set EMWS1.VARCLUS_OUTSTAT.
      WHERE _type_='CORR';
NOTE: The data set EMWS1.VARCLUS_OUTCORR has 34 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 34 observations read from the data set EMWS1.VARCLUS_OUTCORR.
NOTE: The data set EMWS1.VARCLUS_OUTCORR has 34 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 34 observations read from the data set EMWS1.VARCLUS_OUTCORR.
NOTE: The data set EMWS1.VARCLUS_OUTCORRPLOT has 1156 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1156 observations read from the data set EMWS1.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTCORRPLOT has 1156 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1156 observations read from the data set EMWS1.VARCLUS_OUTCORRPLOT.
      WHERE _LABEL_ not = ' ';
NOTE: The data set WORK.VARCLUS_MATCH has 1156 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      7:246
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1156 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: The data set WORK.VARCLUS_MATCH has 1156 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1156 observations read from the data set EMWS1.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTCORRPLOT has 1156 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: Multiple lengths were specified for the BY variable _NAME_ by input data sets. This might cause unexpected results.
NOTE: MERGE statement has more than one data set with repeats of BY values.
NOTE: There were 1156 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: There were 1156 observations read from the data set EMWS1.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTCORRPLOT has 1156 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1156 observations read from the data set EMWS1.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTCORRPLOT has 1156 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.VARCLUS_MATCH (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 44 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS1.VARCLUS_OUTLINK has 44 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 44 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS1.VARCLUS_OUTNODE has 44 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 252 observations read from the data set EMWS1.VARCLUS_OUTSTAT.
NOTE: The data set EMWS1.VARCLUS_OUTSTATSCORE has 12 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file _FILE_ is:
      Filename=C:\Users\Dinis\Google Drive\Intelligent_Systems_MSc\Artificial_Neural_Networks\Assignments\KDD Project\KDD_SAS\Workspaces\EMWS1\VarClus\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=27 March 2017 22:39:52 o'clock,
      Create Time=27 March 2017 22:36:45 o'clock
 
NOTE: 48 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 99.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: The file _OUT is:
      Filename=C:\Users\Dinis\Google Drive\Intelligent_Systems_MSc\Artificial_Neural_Networks\Assignments\KDD Project\KDD_SAS\Workspaces\EMWS1\VarClus\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=27 March 2017 22:39:52 o'clock,
      Create Time=27 March 2017 22:36:45 o'clock
 
NOTE: 48 records were written to the file _OUT.
      The minimum record length was 1.
      The maximum record length was 99.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref _IN has been deassigned.
NOTE: Fileref _OUT has been deassigned.
17669  *------------------------------------------------------------*;
17670  * End TRAIN: VarClus;
17671  *------------------------------------------------------------*;
17672
 
17673  *------------------------------------------------------------*;
17674  * Close any missing semi colons;
17675  *------------------------------------------------------------*;
17676  ;
17677  ;
17678  ;
17679  ;
17680  quit;
17681  *------------------------------------------------------------*;
17682  * Close any unbalanced quotes;
17683  *------------------------------------------------------------*;
17684  /*; *"; *'; */
17685  ;
17686  run;
17687  quit;
17688  /* Reset EM Options */
17689  options formchar="|----|+|---+=|-/\<>*";
17690  options nocenter ls=256 ps=10000;
17691  goptions reset=all device=GIF NODISPLAY;
 
*------------------------------------------------------------*
* Score Log
Date:                27 March 2017
Time:                22:39:53 o'clock
*------------------------------------------------------------*
17793  %let EMEXCEPTIONSTRING=;
17794  *------------------------------------------------------------*;
17795  * SCORE: VarClus;
17796  *------------------------------------------------------------*;
17797  %let EM_ACTION = SCORE;
17798  %let syscc = 0;
17799
17800  %macro main;
17801
17802     filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
17803     %include temp;
17804     filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
17805     %include temp;
17806     filename temp;
17807
17808    %SetProperties;
17809
17810     %if %upcase(&EM_ACTION) = CREATE %then %do;
17811         filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
17812         %include temp;
17813         filename temp;
17814         %create;
17815     %end;
17816     %else
17817     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17818          filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
17819             %include temp;
17820             filename temp;
17821             %train;
17822     %end;
17823     %else
17824     %if %upcase(&EM_ACTION) = SCORE %then %do;
17825             filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
17826             %include temp;
17827             filename temp;
17828             %score;
17829     %end;
17830     %else
17831     %if %upcase(&EM_ACTION) = REPORT %then %do;
17832             filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
17833             %include temp;
17834             filename temp;
17835             %report;
17836     %end;
17837     /*
17838     %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
17839         %put 'OPENING TABLE';
17840     %end;
17841     %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
17842         %put 'CLOSE TABLE';
17843     %end;
17844     */
17845  %mend main;
17846  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
17847 +
17848 +/* Initialize property macro variables */
17849 +%macro SetProperties;
17850 +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
17851 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
17852 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
17853 +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
17854 +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
17855 +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
17856 +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
17857 +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
17858 +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
17859 +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
17860 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
17861 +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
17862 +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
17863 +
17864 +%mend SetProperties;
17865 +
17866 +%Macro MakeDummyVariables(indata=,
17867 +                          outvar=,
17868 +                          outdata=,
17869 +                          fileref=,
17870 +                          recreatecmeta=N, /* optional */
17871 +                          incmeta=,     /* optional */
17872 +                          outcmeta=,    /* optional */
17873 +                          ndummyvars=_ndummyvars
17874 +                          );
17875 +    %global &ndummyvars;
17876 +
17877 +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
17878 +       class
17879 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
17880 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
17881 +    ;
17882 +    run;
17883 +    %let &ndummyvars = 0;
17884 +    data _null_;
17885 +    %let dsid = %sysfunc(open(work._classout));
17886 +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
17887 +    %let dsid = %sysfunc(close(&dsid));
17888 +    run;
17889 +
17890 +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
17891 +       input
17892 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
17893 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
17894 +        / level=nominal stdize=no;
17895 +       make outvar = &outvar;
17896 +       score data = &indata out =&outdata;
17897 +       code  file=  "&fileref";
17898 +    run;
17899 +    %if &recreatecmeta eq Y %then %do;
17900 +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
17901 +    data _tmpds;
17902 +        set _tmpds;
17903 +           ROLE = 'INPUT';
17904 +           LEVEL = 'INTERVAL';
17905 +           CREATOR='DMZIP';
17906 +           if NAME = '_TYPE_' then delete;
17907 +    run;
17908 +    data &outcmeta;
17909 +         set &incmeta _tmpds;
17910 +    run;
17911 +    %end;
17912 +    proc datasets lib=work nolist;
17913 +      delete  _dmdbdat _dmdbcat _classout
17914 +    %if &recreatecmeta eq Y %then %do;
17915 +    _tmpds
17916 +    %end;
17917 +    ;
17918 +    quit;
17919 +%Mend MakeDummyVariables;
17920 +
17921 +/*--- Determine Optimal Number of Cluster ----
17922 +%macro FindClusNum(statds=, groupds=, minvariation=);
17923 +   %global optnclus;
17924 +   data varclus_tmp(drop=_NAME_);
17925 +      set &statDs;
17926 +      where _type_ ='PROPOR';
17927 +   run;
17928 +   proc sort data=varclus_tmp;
17929 +      by _NCL_;
17930 +   run;
17931 +   proc transpose data=varclus_tmp out=varclus_tmp;
17932 +      by _NCL_;
17933 +      var %EM_INTERVAL_INPUT
17934 +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17935 +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
17936 +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
17937 +          %do i = 2 %to &nvar;
17938 +          %let varname = %sysfunc(varname(&dsid, &i));
17939 +          &varname
17940 +          %end;
17941 +      %end;
17942 +   ;
17943 +   run;
17944 +
17945 +   %if &minVariation eq %then %do;
17946 +       %let minVariation = &EM_PROPERTY_MINVARIATION;
17947 +   %end;
17948 +   %if ^(0<&minVariation<100) %then %do;
17949 +       %let minVariation = 90;
17950 +   %end;
17951 +
17952 +   data _null_;
17953 +      set varclus_tmp end=eof;
17954 +      by _NCL_;
17955 +      retain flag 0;
17956 +      if first._ncl_ then flag=0;
17957 +      if .<col1 < &minVariation then flag=1;
17958 +      if last._ncl_ and ^flag then do;
17959 +         call symput('OPTNCL', _ncl_);
17960 +         stop;
17961 +      end;
17962 +     if eof then call symput('OPTNCL', _ncl_);
17963 +   run;
17964 +
17965 +   %let optnclus = &OPTNCL;
17966 +
17967 +   data varclus_tmp(drop=_NCL_ _NAME_);
17968 +      set &statDs;
17969 +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
17970 +   run;
17971 +   proc sort data=varclus_tmp;
17972 +      by _TYPE_;
17973 +   run;
17974 +   proc transpose data=varclus_tmp out=varclus_tmp;
17975 +      by _TYPE_;
17976 +   run;
17977 +   proc sort data=varclus_tmp;
17978 +      by _name_ _type_;
17979 +   run;
17980 +
17981 +  proc transpose data=varclus_tmp out=&groupds;
17982 +      by _NAME_;
17983 +   run;
17984 +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
17985 +      by Cluster descending Rsquare;
17986 +      where Cluster ne 0;
17987 +   run;
17988 +   proc datasets lib=work nolist mt=(DATA VIEW);
17989 +      delete varclus_tmp;
17990 +   run;
17991 +   quit;
17992 +%mend findClusNum;
17993 +*/
17994 +
17995 +%macro getNclusfromTrain(inoutstat=, nc=);
17996 +%global &nc;
17997 +data _null_;
17998 +    set &inoutstat end=eof;
17999 +    if eof then do;
18000 +    call symput("&nc", _ncl_);
18001 +    end;
18002 +run;
18003 +%mend  getNclusfromTrain;
18004 +
18005 +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
18006 +
18007 +     *--- Build Code to Modify Metadata ---*;
18008 +     filename X "&deltacodefile";
18009 +     data _null_;
18010 +        FILE X;
18011 +        set &groupds end=eof;
18012 +        /*by Cluster;*/
18013 +         if _N_=1 then do;
18014 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
18015 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
18016 +           %end;
18017 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
18018 +           put "if upcase(strip(NAME)) in (";
18019 +        end;
18020 +        if Strip(upcase(Selected)) eq 'YES' then do;
18021 +           string = '"'!!trim(left(VARIABLE))!!'"';
18022 +           put string;
18023 +        end;
18024 +        if eof then do;
18025 +           put ') then ROLE="INPUT";';
18026 +           put 'else ROLE="REJECTED";';
18027 +           put 'end;';
18028 +
18029 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
18030 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
18031 +           %end;
18032 +        end;
18033 +     run;
18034 +     quit;
18035 +
18036 +     filename X;
18037 +
18038 +     quit;
18039 +%mend MakeDeltaCode;
18040 +
18041 +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
18042 +    %if ^%sysfunc(exist(&statds)) %then %do;
18043 +         %goto doendc;
18044 +    %end;
18045 +
18046 +    data &corrds(drop=_TYPE_ _NCL_) ;
18047 +       set &statds;
18048 +       where _type_ eq 'CORR' ;
18049 +    run ;
18050 +    proc sort data=&corrds;
18051 +       by _NAME_ ;
18052 +    run ;
18053 +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
18054 +      BY _NAME_ ;
18055 +    run ;
18056 +    data &corrplotds;
18057 +       length _Y_ $100;
18058 +       set &corrplotDs;
18059 +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
18060 +    run ;
18061 +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
18062 +       set &corrplotds;
18063 +       where _LABEL_ ne '' ;
18064 +       keep _TMP_ _LABEL_ ;
18065 +    run ;
18066 +    data _null_;
18067 +       nobs=0;
18068 +       dsid = open('varclus_match');
18069 +       if dsid then do;
18070 +          nobs = attrn(dsid, 'NOBS');
18071 +          dsid = close(dsid);
18072 +       end;
18073 +       call symput ('CORR_NOBS', nobs);
18074 +    run;
18075 +    %if &corr_nobs %then %do;
18076 +        proc sort data=varclus_match;
18077 +           by _name_;
18078 +        run ;
18079 +        proc sort data=&corrplotds;
18080 +           by _name_;
18081 +        run ;
18082 +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
18083 +           merge varclus_match &corrplotds;
18084 +           by _NAME_ ;
18085 +           if _X_ eq '' then _X_=_NAME_ ;
18086 +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
18087 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
18088 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18089 +
18090 +       run ;
18091 +    %end;
18092 +    %else %do;
18093 +        proc sort data=&corrplotds;
18094 +           by _name_;
18095 +        run ;
18096 +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
18097 +           set &corrplotds;
18098 +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18099 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18100 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18101 +
18102 +        run ;
18103 +    %end;
18104 +    proc sort data=&corrplotds;
18105 +       by _X_ _Y_;
18106 +    run ;
18107 +    proc datasets lib=work nolist mt=(DATA VIEW);
18108 +       delete varclus_match;
18109 +    run;
18110 +    quit;
18111 +
18112 +%doendc:
18113 +
18114 +%mend MakeVarClusCorrData;
18115 +
18116 +%macro MakeStatPlotData(statds= , outstatplotds=);
18117 +   %if %sysfunc(exist(&statds)) %then %do;
18118 +
18119 +       data varclus_tmp(drop=_NAME_ _NCL_) ;
18120 +          set &statDs;
18121 +          where _type_ in('MEAN', 'STD', 'N');
18122 +       run ;
18123 +       proc transpose data=varclus_tmp out=&outstatplotds;
18124 +          id _TYPE_ ;
18125 +       run ;
18126 +       data &outstatplotds;
18127 +          set &outstatplotds(obs=1000);
18128 +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
18129 +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
18130 +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
18131 +          else SCALEDSTD= STD ;
18132 +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
18133 +       run ;
18134 +       proc sort data=&outstatplotds;
18135 +          by descending SCALEDSTD ;
18136 +       run ;
18137 +       proc datasets lib=work nolist mt=(DATA VIEW);
18138 +          delete varclus_tmp;
18139 +       run;
18140 +       quit;
18141 +    %end;
18142 +
18143 +%mend MakeStatPlotData;
18144 +
18145 +
18146 +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
18147 +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
18148 +    data &EM_USER_OUTSTATSCORE;
18149 +          set &indata;
18150 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
18151 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
18152 +          if _TYPE_ = 'STD' then _NAME_='STD';
18153 +          DROP _TYPE_ _NCL_;
18154 +     run;
18155 +
18156 +     filename _file_  "&fileRef";
18157 +
18158 +     data _null_;
18159 +        FILE _file_ MOD;
18160 +        put ' ';
18161 +        put '/*-------------------------------------------------*/';
18162 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
18163 +        put '/*-------------------------------------------------*/';
18164 +        put ' ';
18165 +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
18166 +
18167 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
18168 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
18169 +
18170 +        %let k = 1;
18171 +        %do %while(^%sysfunc(fetch(&dsid)));
18172 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
18173 +                %if &k > 2 %then %do;
18174 +                 %let cn = %eval(&k-2);
18175 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
18176 +                %end;
18177 +                %let k = %eval(&k+1);
18178 +        %end;
18179 +
18180 +        %let rc = %sysfunc(rewind(&dsid));
18181 +
18182 +        %do i= 2 %to &nvar;
18183 +            %let _varname =  %sysfunc(varname(&dsid, &i));
18184 +            %do %while(^%sysfunc(fetch(&dsid)));
18185 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
18186 +                %if &_name = MEAN %then
18187 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
18188 +                %else %if &_name = STD %then
18189 +                %let _std = %sysfunc(getvarn(&dsid, &i));
18190 +                %else %do;
18191 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
18192 +                      %let abscoeff = %sysfunc(abs(&coeff));
18193 +                          %if &abscoeff >  0 %then %do;
18194 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
18195 +                           %end;
18196 +                 %end;
18197 +             %end;
18198 +             %let rc = %sysfunc(rewind(&dsid));
18199 +         %end;
18200 +
18201 +        %let dsid= %sysfunc(close(&dsid));
18202 +       run;
18203 +%mend CreateScoreCode;
18204 +
18205 +
18206 +
18207 +/*----------------------------------------------------------
18208 +    Instead of using %MakeRSquareData,
18209 +    %MakeVarClusResultTable at macro2.source is used
18210 + +----------------------------------------------------------*/
18211 +
18212 +
18213 +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
18214 +
18215 +/* modifying  from ods rsquare = data */
18216 +
18217 +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
18218 +    Length Cluster $16;
18219 +    length Variable $32;
18220 +    Length VariableLabel $64;
18221 +    set &indata; retain CurrentCluster;
18222 +    if NumberOfClusters ^= &ncluster then delete;
18223 +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
18224 +    CurrentCluster = Cluster;
18225 +   run;
18226 +proc sort data =&outdata ;
18227 +     by Cluster RsquareRatio;
18228 +run;
18229 +data _tmprsq(drop=index);
18230 +     set &outdata; by Cluster;
18231 +     if first.Cluster then do;
18232 +     index = strip(scan(Cluster,2 ));
18233 +     Variable = "Clus"||index;
18234 +     VariableLabel = "Cluster Component "||index;
18235 +     OwnCluster = 1;
18236 +     NextClosest = .;
18237 +     RsquareRatio = 0;
18238 +     output;
18239 +     end;
18240 +run;
18241 +
18242 +proc sort data = _tmprsq ;
18243 +     by Cluster RsquareRatio;
18244 +run;
18245 +data &outdata;
18246 +     set &outdata _tmprsq;
18247 +by Cluster;
18248 +run;
18249 +
18250 +
18251 +/* Just create the Selected variable with all YES */
18252 +
18253 +data &outdata;
18254 +    set &outdata; by cluster;
18255 +    length Selected $8;
18256 +    Selected = 'YES';
18257 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18258 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18259 +    rename OwnCluster = RSqWithClusterComp;
18260 +    rename NextClosest = RSqWithNextClusComp;
18261 +run;
18262 +
18263 +
18264 +/* Selected = Y/N will be done %score section -----
18265 +
18266 +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
18267 +data &outdata;
18268 +    set &outdata; by cluster;
18269 +    length Selected $8;
18270 +    if first.Cluster then Selected = 'YES';
18271 +    else Selected = 'NO';
18272 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18273 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18274 +    rename OwnCluster = RSqWithClusterComp;
18275 +    rename NextClosest = RSqWithNextClusComp;
18276 +run;
18277 +%end;
18278 +%else %do;
18279 +data &outdata;
18280 +    set &outdata; by cluster;
18281 +    if last.Cluster then Selected = 'YES';
18282 +    else Selected = 'NO';
18283 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18284 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18285 +    rename OwnCluster = RSqWithClusterComp;
18286 +    rename NextClosest = RSqWithNextClusComp;
18287 +run;
18288 +%end;
18289 +---------------------------------------------------------------*/
18290 +
18291 +%if %sysfunc(exist(&inClusRSquare)) %then %do;
18292 +/* to calculate NextClosestClusRsq */
18293 +proc transpose data = &inClusRSquare  out=_clusRsq;
18294 +      by cluster;
18295 +      run;
18296 +data _clusRsq;
18297 +     set _clusRsq;
18298 +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
18299 +run;
18300 +
18301 +proc sort data=_clusRsq;
18302 +    by cluster col1;
18303 +    run;
18304 +data _clusRsq(drop=_NAME_ _LABEL_);
18305 +     set _clusRsq; by cluster;
18306 +     if last.Cluster then output;
18307 +     label  COL1 = 'R-Sqaure with Next Cluster Component';
18308 +     rename COL1 = RSqWithNextClusComp;
18309 +     rename Cluster = Variable;
18310 +     label  Cluster = "Variable";
18311 +run;
18312 +
18313 +proc sort data =&outdata;
18314 +     by Variable;
18315 +run;
18316 +data &outdata;
18317 +    merge &outdata _clusRsq;
18318 +    by Variable;
18319 +run;
18320 +proc sort data =&outdata;
18321 +by Cluster  RsquareRatio;
18322 +run;
18323 +quit;
18324 +%end;
18325 +
18326 +proc datasets lib = work nolist;
18327 +     delete _tmprsq _clusRsq;
18328 +     run;
18329 +quit;
18330 +
18331 +%mend MakeRSquareData;
18332 +
18333 +
18334 +/*-------------------------------------------------------------------------*/
18335 +
18336 +
18337 +
18338 +%macro ModifyCorr(indata=,
18339 +                  outdata=,
18340 +                  rsquare = Y
18341 +                  );
18342 +    data corr_tmp;
18343 +        set &indata;
18344 +    run;
18345 +     proc sql;
18346 +           update &indata
18347 +           set
18348 +     %let dsid = %sysfunc(open(work.corr_tmp));
18349 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
18350 +          %do i = 4 %to &nvar;
18351 +          %let _name = %sysfunc(varname(&dsid, &i));
18352 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
18353 +            %else  %let _name_md = &_name;
18354 +            %if &i < &nvar %then %do;
18355 +               &_name = 1- &_name_md ,
18356 +            %end;
18357 +            %else %do;
18358 +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
18359 +            %end;
18360 +          %end;
18361 +      %let dsid= %sysfunc(close(&dsid));
18362 +
18363 +      select * from &indata;
18364 +      run;
18365 +      proc datasets lib = work nolist;
18366 +           delete corr_tmp;
18367 +      run;
18368 +      quit;
18369 +
18370 + %mend ModifyCorr;
18371 +
18372 + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
18373 +    data &outdata(drop= _NCL_  _TYPE_);
18374 +       set &indata;
18375 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
18376 +       rename _NAME_ = Cluster;
18377 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18378 +    run;
18379 +    %if &RSquare eq Y %then %do;
18380 +     data corr_tmp;
18381 +        set &outdata;
18382 +     run;
18383 +
18384 +     data &outdata(drop=i);
18385 +          set &outdata;
18386 +          %let dsid = %sysfunc(open(work.corr_tmp));
18387 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18388 +          %do i = 2 %to &nvar;
18389 +            %let _name = %sysfunc(varname(&dsid, &i));
18390 +            %let _name_md = &_name.**2;
18391 +                &_name = &_name_md;
18392 +          %end;
18393 +      %let dsid= %sysfunc(close(&dsid));
18394 +      run;
18395 +      proc datasets lib = work nolist;
18396 +           delete corr_tmp;
18397 +      run;
18398 +
18399 +    %end;
18400 +     quit;
18401 +%mend MakeClusStructCorrData;
18402 +
18403 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
18404 +    data &outdata(drop= _NCL_  _TYPE_);
18405 +       set &indata;
18406 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
18407 +       rename _NAME_ = Cluster;
18408 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18409 +    run;
18410 +    data corr_tmp;
18411 +        set &outdata;
18412 +    run;
18413 +
18414 +    %let dsid = %sysfunc(open(work.corr_tmp));
18415 +    %let nclus2= %eval(&ncluster+1);
18416 +    data &outdata;
18417 +         set &outdata;
18418 +          %do i = 2 %to &nclus2;
18419 +          %let i_1 = %eval(&i-1);
18420 +            %let _name = %sysfunc(varname(&dsid, &i));
18421 +            %let _newName = Clus&i_1;
18422 +                rename &_name = &_newName; ;
18423 +                *label &_name ="Cluster &i_1";
18424 +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
18425 +          %end;
18426 +          keep Cluster
18427 +          %do i = 2 %to &nclus2;
18428 +                %let _name = %sysfunc(varname(&dsid, &i));
18429 +                &_name
18430 +          %end;
18431 +          ;
18432 +    %let dsid= %sysfunc(close(&dsid));
18433 +     run;
18434 +     quit;
18435 +
18436 +    %if &RSquare eq Y %then %do;
18437 +
18438 +       data corr_tmp;
18439 +        set &outdata;
18440 +     run;
18441 +
18442 +     data &outdata(drop=i);
18443 +          set &outdata;
18444 +          %let dsid = %sysfunc(open(work.corr_tmp));
18445 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18446 +          %do i = 2 %to &nvar;
18447 +            %let _name = %sysfunc(varname(&dsid, &i));
18448 +            %let _name_md = &_name.**2;
18449 +                &_name = &_name_md;
18450 +          %end;
18451 +      %let dsid= %sysfunc(close(&dsid));
18452 +      run;
18453 +    %end;
18454 +
18455 +    %if &makeplotds eq Y %then %do;
18456 +     proc transpose data = &outdata
18457 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18458 +          by cluster;
18459 +     run;
18460 +     data &plotds;
18461 +          set  &plotds;
18462 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18463 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18464 +     run;
18465 +     %end;
18466 +     proc datasets lib = work nolist;
18467 +           delete corr_tmp;
18468 +     run;
18469 +     quit;
18470 +%mend MakeInterClusCorrData;
18471 +
18472 +
18473 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
18474 +
18475 +data &outlink(drop = Selected);
18476 +     set &indata;
18477 +     LINKID = _N_;
18478 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
18479 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
18480 +run;
18481 +data &outnode(keep=NODEID TYPE LABEL);
18482 +    set &indata;
18483 +    length TYPE $16;
18484 +    rename Variable = NODEID;
18485 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
18486 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
18487 +    then  TYPE = "CLUSTER";
18488 +    else  TYPE="VARIABLE";
18489 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
18490 +run;
18491 +quit;
18492 +%mend MakeClusConstellData;
18493 +
18494 +
18495 +
18496 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
18497 +
18498 +data &outlink(drop = Selected);
18499 +     set &indata;
18500 +     LINKID = _N_;
18501 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
18502 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
18503 +run;
18504 +data &outnode(keep=NODEID TYPE LABEL);
18505 +    set &indata;
18506 +    length TYPE $16;
18507 +    rename Variable = NODEID;
18508 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
18509 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
18510 +    then  TYPE = "CLUSTER";
18511 +    else  TYPE="VARIABLE";
18512 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
18513 +run;
18514 +quit;
18515 +%mend MakeClusConstellData;
18516 +
18517 +
18518 +/*--- This will work only when inds is not a view data -------
18519 +
18520 +%macro getNVarNObs(inds=, nvar=, nobs=);
18521 +
18522 +    %global &nvar;
18523 +    %global &nobs;
18524 +    data _null_;
18525 +         dsid = open("&inds");
18526 +         nv = attrn(dsid, 'NVAR');
18527 +         no = attrn(dsid, 'NOBS');
18528 +         dsid = close(dsid);
18529 +         call symput("&nvar", nv);
18530 +         call symput("&nobs", no);
18531 +    run;
18532 +    quit;
18533 +%mend  getNVarNObs;
18534 +
18535 ++---------------------------------------------------------------*/
18536 +
18537 +
18538 +%macro getNVar(inds=, nvar=);
18539 +    %global &nvar;
18540 +    data _null_;
18541 +         dsid = open("&inds");
18542 +         nv = attrn(dsid, 'NVAR');
18543 +         dsid = close(dsid);
18544 +         call symput("&nvar", nv);
18545 +    run;
18546 +    quit;
18547 +%mend  getNVar;
18548 +
18549 +
18550 +
18551 +%macro getNObs(inds=, nobs=);
18552 +    %global &nobs;
18553 +    data _null_;
18554 +        set &inds end=eof;
18555 +        if eof then call symput("&nobs", _N_);
18556 +    run;
18557 +    quit;
18558 +%mend  getNObs;
18559 +
18560 +%Macro CreateVarclusMeta(trainnum=);
18561 +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
18562 +    data &EM_USER_VARCLUSMETA;
18563 +         length TrainNum 8.;
18564 +         length NewTrain $8;
18565 +         length NGCluster 8.;
18566 +         length ExportedComp $16;
18567 +         length HideVariable $8;
18568 +         TrainNum = &trainnum;
18569 +         NewTrain = "Y";
18570 +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
18571 +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
18572 +         NGCluster = 0; /* zero means no twostage */
18573 +   run;
18574 +   quit;
18575 +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
18576 +
18577 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
18578 +    data &outdata(drop= _NCL_  _TYPE_);
18579 +       set &indata;
18580 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
18581 +       %if &globalclusid ne %then %do;
18582 +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
18583 +       rename _NAME_ = Cluster;
18584 +       %end;
18585 +       %else %do;
18586 +        _NAME_ = upcase(_NAME_);
18587 +       rename _NAME_ = Cluster;
18588 +       %end;
18589 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18590 +    run;
18591 +    data corr_tmp;
18592 +        set &outdata;
18593 +    run;
18594 +
18595 +    %let dsid = %sysfunc(open(work.corr_tmp));
18596 +    %let nclus2= %eval(&ncluster+1);
18597 +    data &outdata;
18598 +         set &outdata;
18599 +          %do i = 2 %to &nclus2;
18600 +          %let i_1 = %eval(&i-1);
18601 +            %let _name = %sysfunc(varname(&dsid, &i));
18602 +            %if &globalclusid ne %then
18603 +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
18604 +                     rename &_name = &_newName;
18605 +                     *label &_name ="GC &globalclusid : Cluster &i_1";
18606 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
18607 +                %end;
18608 +            %else
18609 +                %do; %let _newName = CLUS&i_1;
18610 +                     rename &_name = &_newName;
18611 +                     *label &_name ="Cluster &i_1";
18612 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
18613 +                %end;
18614 +          %end;
18615 +          keep Cluster
18616 +          %do i = 2 %to &nclus2;
18617 +                %let _name = %sysfunc(varname(&dsid, &i));
18618 +                &_name
18619 +          %end;
18620 +          ;
18621 +    %let dsid= %sysfunc(close(&dsid));
18622 +     run;
18623 +     quit;
18624 +
18625 +    %if &RSquare eq Y %then %do;
18626 +
18627 +       data corr_tmp;
18628 +        set &outdata;
18629 +     run;
18630 +
18631 +     data &outdata;
18632 +          set &outdata;
18633 +          %let dsid = %sysfunc(open(work.corr_tmp));
18634 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18635 +          %do i = 2 %to &nvar;
18636 +            %let _name = %sysfunc(varname(&dsid, &i));
18637 +            %let _name_md = &_name.**2;
18638 +                &_name = &_name_md;
18639 +          %end;
18640 +      %let dsid= %sysfunc(close(&dsid));
18641 +      run;
18642 +    %end;
18643 +
18644 +    %if &makeplotds eq Y %then %do;
18645 +     proc transpose data = &outdata
18646 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18647 +          by cluster;
18648 +     run;
18649 +     data &plotds;
18650 +          set  &plotds;
18651 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18652 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18653 +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18654 +     run;
18655 +     %end;
18656 +     proc datasets lib = work nolist;
18657 +           delete corr_tmp;
18658 +     run;
18659 +     quit;
18660 +%mend MakeInterClusCorrData;
18661 +
18662 +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
18663 +    data _tmpds(drop= _NCL_);
18664 +       set &indata;
18665 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
18666 +       %if &globalclusid ne %then %do;
18667 +           _NAME_ = "GC&globalclusid.";
18668 +       rename _NAME_ = Cluster;
18669 +       %end;
18670 +       %else %do;
18671 +        _NAME_ = "CLUS";
18672 +        rename _NAME_ = Cluster;
18673 +       %end;
18674 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18675 +    run;
18676 +    proc transpose data =_tmpds out =&outdata;
18677 +    run;
18678 +
18679 +    data &outdata(drop=COL1);
18680 +        %if &globalclusid ne %then %do;
18681 +        length GCluster $16;
18682 +        %end;
18683 +        length Cluster $32;
18684 +        length _NAME_ $32;
18685 +         set &outdata;
18686 +         _NAME_ = upcase(_NAME_);
18687 +         rename _NAME_=Variable;
18688 +         *label _NAME_="Variable";
18689 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18690 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18691 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18692 +
18693 +         %if &globalclusid ne %then %do;
18694 +          GCluster = "GC&globalclusid";
18695 +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
18696 +         %end;
18697 +         %else %do;
18698 +         Cluster = "CLUS"||strip(COL1);
18699 +        %end;
18700 +         rename COL2 = RSqWithOwnClusComp;
18701 +         *label COL2 = "R-Square With Own Cluster Component";
18702 +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
18703 +
18704 +   run;
18705 +   proc sort data =&outdata;
18706 +        by Cluster RSqWithOwnClusComp;
18707 +   run;
18708 +   proc datasets lib = work nolist;
18709 +           delete _tmpds;
18710 +   run;
18711 +   quit;
18712 +%mend MakeOwnRSquare;
18713 +
18714 +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
18715 +    data &outdata(drop= _NCL_  _TYPE_);
18716 +       %if &globalclusid ne %then %do;
18717 +        length GCluster $16;
18718 +        %end;
18719 +       set &indata;
18720 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
18721 +       %if &globalclusid ne %then %do;
18722 +         GCluster = "GC&globalclusid";
18723 +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
18724 +         rename _NAME_ = Cluster;
18725 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18726 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18727 +
18728 +       %end;
18729 +       %else %do;
18730 +         _NAME_ = upcase(_NAME_);
18731 +         rename _NAME_ = Cluster;
18732 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18733 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18734 +
18735 +       %end;
18736 +     run;
18737 +    %if &RSquare eq Y %then %do;
18738 +     data corr_tmp;
18739 +          set &outdata;
18740 +     run;
18741 +     %let istart = 2;
18742 +     %if &globalclusid ne %then %let istart = 3;
18743 +     data &outdata;
18744 +          set &outdata;
18745 +          %let dsid = %sysfunc(open(work.corr_tmp));
18746 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18747 +          %do i =&istart %to &nvar;
18748 +            %let _name = %sysfunc(varname(&dsid, &i));
18749 +            %let _name_md = &_name.**2;
18750 +                &_name = &_name_md;
18751 +          %end;
18752 +      %let dsid= %sysfunc(close(&dsid));
18753 +      run;
18754 +      proc datasets lib = work nolist;
18755 +           delete corr_tmp;
18756 +      run;
18757 +    %end;
18758 +     quit;
18759 +%mend MakeClusStructCorrData;
18760 +
18761 +/*
18762 +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
18763 +*/
18764 +
18765 +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
18766 +
18767 +     /* The indata should be the outdata
18768 +        from %MakeClusStructCorrData(indata=, outdata=, ); */
18769 +
18770 +     proc sort data =&indata out=_tmpclusRsq;
18771 +     by cluster;
18772 +     run;
18773 +
18774 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
18775 +      by cluster;
18776 +     run;
18777 +
18778 +     proc sort data=_tmpclusRsq;
18779 +        by _NAME_ COL1;
18780 +     run;
18781 +
18782 +     data _tmpclusRsq;
18783 +         length _NAME_ $32;
18784 +         set _tmpclusRsq; by _NAME_;
18785 +          _NAME_ = upcase(_NAME_);
18786 +          %if &ncluster ne 1 %then %do;
18787 +             if last._NAME_ then delete;
18788 +          %end;
18789 +          %else %do;
18790 +             COL1 = 0;
18791 +          %end;
18792 +     run;
18793 +     /* need to sort again */
18794 +     proc sort data=_tmpclusRsq;
18795 +        by _NAME_ COL1;
18796 +     run;
18797 +
18798 +     data &outdata;
18799 +         set _tmpclusRsq; by _NAME_;
18800 +         Cluster = upcase(Cluster);
18801 +         if last._NAME_ then output;
18802 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
18803 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
18804 +         rename COL1 = RSqWithNextClusComp;
18805 +         Cluster = upcase(Cluster);
18806 +         rename Cluster = ClosestCluster;
18807 +         *label  Cluster = "Next Closest Cluster";
18808 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
18809 +         rename _NAME_ = Variable;
18810 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18811 +    run;
18812 +
18813 +
18814 +    %if &globalclusid ne %then %do;
18815 +    data &outdata;
18816 +       length GCluster $16;
18817 +       set &outdata;
18818 +       GCluster = "GC&globalclusid";
18819 +       run;
18820 +    %end;
18821 +    proc datasets lib = work nolist;
18822 +           delete _tmpclusRsq;
18823 +    run;
18824 +    quit;
18825 +%mend FindNextClosestClusByVar;
18826 +
18827 +
18828 +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
18829 +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
18830 +     proc sort data =&indata out=_tmpclusRsq;
18831 +     by cluster;
18832 +     run;
18833 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
18834 +     by cluster;
18835 +     run;
18836 +     proc sort data=_tmpclusRsq;
18837 +        by _NAME_ col1;
18838 +     run;
18839 +     data _tmpclusRsq;
18840 +         length _NAME_ $32;
18841 +         set _tmpclusRsq; by _NAME_;
18842 +          _NAME_ = upcase(_NAME_);
18843 +          %if &ncluster ne 1 %then %do;
18844 +             if last._NAME_ then delete;
18845 +          %end;
18846 +          %else %do;
18847 +             COL1 = 0;
18848 +          %end;
18849 +     run;
18850 +     data &outdata;
18851 +         set _tmpclusRsq; by _NAME_;
18852 +         Cluster = upcase(Cluster);
18853 +         if last._NAME_ then output;
18854 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
18855 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
18856 +         rename COL1 = RSqWithNextClusComp;
18857 +         Cluster = upcase(Cluster);
18858 +         rename Cluster = ClosestCluster;
18859 +         *label  Cluster = "Next Closest Cluster";
18860 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
18861 +         rename _NAME_ = Variable;
18862 +         *label  _NAME_ = "Variable";
18863 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18864 +
18865 +    run;
18866 +    %if &globalclusid ne %then %do;
18867 +    data &outdata;
18868 +       length GCluster $16;
18869 +       set &outdata;
18870 +       GCluster = "GC&globalclusid";
18871 +       run;
18872 +    %end;
18873 +
18874 +    proc datasets lib = work nolist;
18875 +           delete _tmpclusRsq;
18876 +    run;
18877 +
18878 +    quit;
18879 +%mend FindNextClosestClusByCluster;
18880 +
18881 +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
18882 +/*----
18883 +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
18884 +-----------*/
18885 +
18886 +proc sort data =&indata1;
18887 +    by Variable;
18888 +run;
18889 +proc sort data =&indata2;
18890 +    by Variable;
18891 +run;
18892 +data &outdata;
18893 +    merge &indata1 &indata2;
18894 +    by Variable;
18895 +    length Type $16;
18896 +    Type = 'Variable';
18897 +    *label Type ='Type';
18898 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
18899 +run;
18900 +
18901 +
18902 +data &indata3;
18903 +    set  &indata3 ;
18904 +    length RSqWithOwnClusComp 8.;
18905 +    Cluster = Variable;
18906 +    RSqWithOwnClusComp = 1;
18907 +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
18908 +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
18909 +    length Type $16;
18910 +    Type = 'ClusterComp';
18911 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
18912 +
18913 +;
18914 +run;
18915 +
18916 +proc sort data=&outdata;
18917 +    by Cluster;
18918 +run;
18919 +proc sort data =&indata3;
18920 +    by Cluster;
18921 +run;
18922 +
18923 +data &outdata;
18924 +     set &outdata &indata3;
18925 +     by Cluster;
18926 +run;
18927 +
18928 +
18929 +/* Create the Selected variable with all YES */
18930 +
18931 +data &outdata;
18932 +     set &outdata;
18933 +     length RsqRatio 8.;
18934 +     length Selected $8;
18935 +     *label RSqRatio = "1-R**2 Ratio";
18936 +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
18937 +     *label Selected = "Variable Selected";
18938 +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
18939 +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
18940 +     Selected ='YES';
18941 +     rename _LABEL_ = Label;
18942 +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
18943 +run;
18944 +
18945 +
18946 +/*----  Selected = Y/N will be assigened at the %score                   -------+
18947 +        Just create the Selected variable with all YES at the step above
18948 + +------------------------------------------------------------------------------+
18949 +
18950 +proc sort data=&outdata;
18951 +    by Cluster RsqRatio;
18952 +run;
18953 +
18954 +%if &selectedcomp eq CLUSTERCOMP %then %do;
18955 +data &outdata;
18956 +     set &outdata; by Cluster;
18957 +     length Selected $8;
18958 +     label Selected = "Variable Selected";
18959 +     if  first.Cluster then Selected ='Yes';
18960 +     else Selected = 'No';
18961 +    run;
18962 +%end;
18963 +%else %do;
18964 +data &outdata(drop = _var _varchange);
18965 +     set &outdata; retain _var 0; by Cluster;
18966 +     length Selected $8;
18967 +     label Selected = "Variable Selected";
18968 +     if first.Cluster then  _varchange = 0;
18969 +     else _varchange =1;
18970 +     if _var ne _varchange then  Selected  = 'Yes';
18971 +     else Selected = 'No';
18972 +     if last.cluster then  _var = 0;
18973 +     else _var = _varchange;
18974 +run;
18975 +%end;
18976 +
18977 +--------------------------------------------------------------*/
18978 +
18979 +quit;
18980 +%mend MakeVarClusResultTable;
18981 +
18982 +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
18983 +     proc sort data =&indata;
18984 +        by cluster;
18985 +     run;
18986 +     proc transpose data =&indata
18987 +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18988 +          by cluster;
18989 +     run;
18990 +     data &outdata;
18991 +          set  &outdata;
18992 +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18993 +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18994 +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
18995 +     run;
18996 +     %if &globalclusid ne %then %do;
18997 +     data &outdata;
18998 +          Length GCluster $16;
18999 +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19000 +          set  &outdata;
19001 +          GCluster ="GC&globalclusid.";
19002 +          run;
19003 +     %end;
19004 +
19005 +%Mend MakePlotDataFromCorrTable;
19006 +
19007 +
19008 +%macro MakeCorrelation(indata=,
19009 +                       outstat=_tmpoutstat,
19010 +                       corrmatrix=N,
19011 +                       outcorr=_tmpoutcorr,
19012 +                       includeclassvar=N,
19013 +                       target=,
19014 +                       freq=,
19015 +                       weight=);
19016 +   %if &target eq  %then %do;
19017 +
19018 +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
19019 +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
19020 +       %if &includeclassvar eq Y %then %do;
19021 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
19022 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
19023 +          %do i = 2 %to &nvar;
19024 +          %let varname = %sysfunc(varname(&dsid, &i));
19025 +          &varname
19026 +          %end;
19027 +       %end;
19028 +       ;
19029 +      %if &freq ne  %then %do;
19030 +          freq &freq;
19031 +      %end;
19032 +      %if &weight ne  %then %do;
19033 +          weight &weight;
19034 +      %end;
19035 +
19036 +      run;
19037 +      %if &corrmatrix eq Y %then %do;
19038 +      data  &outcorr (drop = _NCL_ _TYPE_);
19039 +           set  &outstat ;
19040 +           if _TYPE_ ='CORR' then output;
19041 +      run;
19042 +      %end;
19043 +    %end;
19044 +    %else %do;
19045 +       proc corr data=&indata outp=&outstat noprint;
19046 +            var
19047 +       %let dsid = %sysfunc(open(&indata));
19048 +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
19049 +          %do i = 1 %to &nvar;
19050 +              %let _name = %sysfunc(varname(&dsid, &i));
19051 +              %if &_name ne &target %then;
19052 +              &_name
19053 +           %end;
19054 +        %let dsid= %sysfunc(close(&dsid));
19055 +        ;
19056 +        with &target;
19057 +        run;
19058 +    %end;
19059 +    quit;
19060 +%mend MakeCorrelation;
19061 +
19062 +
19063 +%macro MakeCorrelationDistance(indata=,
19064 +                               outdata=,
19065 +                               rsquare = N
19066 +                               );
19067 +    data corr_tmp;
19068 +        set &indata;
19069 +        if _N_ = 1 then do;
19070 +           output;
19071 +           stop;
19072 +         end;
19073 +    run;
19074 +    %if &outdata ne  %then %let  _outdata = &outdata;
19075 +    %else %let _outdata = &indata;
19076 +
19077 +    data &_outdata;
19078 +         set &indata;
19079 +
19080 +         %let dsid = %sysfunc(open(work.corr_tmp));
19081 +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
19082 +          %do i = 2 %to &nvar;
19083 +              %let _name = %sysfunc(varname(&dsid, &i));
19084 +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
19085 +              %else  %let _name_md = &_name;
19086 +              &_name = 1- &_name_md;
19087 +          %end;
19088 +      %let dsid= %sysfunc(close(&dsid));
19089 +      run;
19090 +      proc datasets lib = work nolist;
19091 +           delete corr_tmp;
19092 +      run;
19093 +      quit;
19094 +  %mend MakeCorrelationDistance;
19095 +
19096 +
19097 +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
19098 +                                   rsquare = N
19099 +                                   );
19100 +    data corr_tmp;
19101 +        set &indata;
19102 +    run;
19103 +    proc sql noprint;
19104 +           update &indata
19105 +           set
19106 +     %let dsid = %sysfunc(open(work.corr_tmp));
19107 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
19108 +          %do i = 4 %to &nvar;
19109 +          %let _name = %sysfunc(varname(&dsid, &i));
19110 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
19111 +            %else  %let _name_md = &_name;
19112 +            %if &i < &nvar %then %do;
19113 +               &_name = 1- &_name_md ,
19114 +            %end;
19115 +            %else %do;
19116 +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
19117 +            %end;
19118 +          %end;
19119 +      %let dsid= %sysfunc(close(&dsid));
19120 +
19121 +      select * from &indata;
19122 +      run;
19123 +     data &indata( drop = _NCL_);
19124 +           set &indata;
19125 +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
19126 +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
19127 +     run;
19128 +     data &indata(DROP = _NCL_);
19129 +           set &indata;
19130 +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
19131 +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
19132 +           rename _NAME_ = _VAR_;
19133 +     run;
19134 +     proc datasets lib = work nolist;
19135 +           delete corr_tmp;
19136 +     run;
19137 +     quit;
19138 + %mend UpdateOutStatCorrToDistance;
19139 +
19140 +
19141 +%macro HierClusWithCorr(indata= ,
19142 +                        ncluster=,
19143 +                        method = Ward,
19144 +                        outtree = _outtree,
19145 +                        idvar =_VAR_,
19146 +                        outdata=,
19147 +                        rescore = N,
19148 +                        newncluster=
19149 +                        );
19150 +      %global &newncluster;
19151 +      %if &rescore ne Y %then %do;
19152 +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
19153 +                   method=&method outtree=&outtree noprint;
19154 +           id &idvar;
19155 +      run;
19156 +      %end;
19157 +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
19158 +      run;
19159 +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
19160 +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
19161 +      run;
19162 +      data _outcontent;
19163 +          set _outcontent;
19164 +          if NAME in ('_TYPE_' , '_VAR_') then delete;
19165 +          index = 1;
19166 +          rename NAME = _NAME_;
19167 +      run;
19168 +      proc sort data=_outcontent;
19169 +          by _NAME_;
19170 +      run;
19171 +      proc sort data =&outdata;
19172 +           by _NAME_;
19173 +      run;
19174 +      data &outdata(drop=index);
19175 +          merge &outdata _outcontent;
19176 +          by _NAME_;
19177 +          if index = . then delete;
19178 +      run;
19179 +      /*-----------------------------------------------------------*/
19180 +      data &outdata;
19181 +           length CLUSNAME $16;
19182 +           set &outdata;
19183 +           if CLUSTER > &ncluster then delete;
19184 +           CLUSNAME='GC'||strip(CLUSTER);
19185 +           *label CLUSNAME = "Cluster Name";
19186 +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
19187 +           rename _NAME_ = VARIABLE ;
19188 +           *label _NAME_ = "Variable";
19189 +           *label CLUSTER = "Cluster";
19190 +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
19191 +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19192 +      run;
19193 +      proc sort data=&outdata out=&outdata;
19194 +           by CLUSTER;
19195 +      run;
19196 +      proc means data =&outdata noprint;
19197 +           output out=_meanout;
19198 +      run;
19199 +      data _null_;
19200 +            set _meanout;
19201 +            if strip(_STAT_) eq 'MAX' then do;
19202 +            call symput("&newncluster", CLUSTER);
19203 +            stop;
19204 +            end;
19205 +      run;
19206 +
19207 +      proc datasets lib = work nolist;
19208 +           delete _outcontent _meanout;
19209 +      run;
19210 +      quit;
19211 +%mend  HierClusWithCorr;
19212 +
19213 +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
19214 +
19215 +     data _tmpindata;
19216 +          set &indata;
19217 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
19218 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
19219 +          if _TYPE_ = 'STD' then _NAME_='STD';
19220 +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
19221 +          DROP _TYPE_ _NCL_;
19222 +     run;
19223 +
19224 +     filename _file_  "&fileRef";
19225 +
19226 +     data _null_;
19227 +        FILE _file_ MOD;
19228 +        put ' ';
19229 +        put "/*-------------------------------------------------*/";
19230 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
19231 +        put "/*-------------------------------------------------*/";
19232 +        put ' ';
19233 +        %let dsid = %sysfunc(open(work._tmpindata));
19234 +
19235 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
19236 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
19237 +        %let k = 1;
19238 +        %do %while(^%sysfunc(fetch(&dsid)));
19239 +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19240 +               %if &k > 2 %then %do;
19241 +                %let cn = %eval(&k-2);
19242 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
19243 +                %end;
19244 +                %let k = %eval(&k+1);
19245 +
19246 +        %end;
19247 +        %let rc = %sysfunc(rewind(&dsid));
19248 +
19249 +        %do j= 2 %to &nvar;
19250 +            %let _varname = %sysfunc(varname(&dsid, &j));
19251 +            %do %while(^%sysfunc(fetch(&dsid)));
19252 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19253 +                %if &_name = MEAN %then
19254 +                %let _mean = %sysfunc(getvarn(&dsid, &j));
19255 +                %else %if &_name = STD %then
19256 +                %let _std = %sysfunc(getvarn(&dsid, &j));
19257 +                %else %do;
19258 +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
19259 +                      %let abscoeff = %sysfunc(abs(&coeff));
19260 +                          %if &abscoeff >  0 %then %do;
19261 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
19262 +                           %end;
19263 +                 %end;
19264 +             %end;
19265 +             %let rc = %sysfunc(rewind(&dsid));
19266 +         %end;
19267 +
19268 +        %let dsid= %sysfunc(close(&dsid));
19269 +
19270 +     run;
19271 +
19272 +     filename _file_;
19273 +     proc datasets lib = work nolist;
19274 +           delete _tmpindata;
19275 +     run;
19276 +     quit;
19277 +%mend CreateScoreCode2;
19278 +
19279 +
19280 +%macro MakeDeltaCode2(groupds=,deltacodefile=);
19281 +
19282 +     /*--- Build Code to Modify Metadata ---*/
19283 +     filename X "&deltacodefile";
19284 +     data _null_;
19285 +        FILE X;
19286 +        set &groupds end=eof;
19287 +        if _N_=1 then do;
19288 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
19289 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
19290 +           %end;
19291 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
19292 +           put "if upcase(strip(NAME)) in (";
19293 +        end;
19294 +        if Strip(upcase(Selected)) eq 'YES' then do;
19295 +           string = '"'!!trim(left(VARIABLE))!!'"';
19296 +           put string;
19297 +        end;
19298 +        if eof then do;
19299 +           put ') then ROLE="INPUT";';
19300 +           put 'else ROLE="REJECTED";';
19301 +           put 'end;';
19302 +
19303 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
19304 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
19305 +           %end;
19306 +        end;
19307 +     run;
19308 +     quit;
19309 +
19310 +     filename X;
19311 +     quit;
19312 +%mend MakeDeltaCode2;
19313 +
19314 +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
19315 +  %global &ngc;
19316 +  data _null_;
19317 +  %if &indata ne %then %do;
19318 +      %let dsid = %sysfunc(open(&indata));
19319 +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
19320 +      %let dsid = %sysfunc(close(&dsid));
19321 +  %end;
19322 +  %else %do;
19323 +       %let nvar = %eval(&ninput+&ndummy); ;
19324 +  %end;
19325 +  %let numgc = %eval(&nvar/&div+2);
19326 +  %let &ngc = &numgc;
19327 +   run;
19328 +  quit;
19329 +%mend getInitialGClusterNumber;
19330 +
19331 +
19332 +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
19333 +data &outlink(drop = Selected);
19334 +     set &indata;
19335 +     LINKID = _N_;
19336 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
19337 +run;
19338 +data &outnode(keep=NODEID TYPE LABEL);
19339 +    set &indata;
19340 +    length TYPE $16;
19341 +    rename VARIABLE = NODEID;
19342 +    *label  CLUSNAME="Node ID";
19343 +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19344 +    TYPE = "VARIABLE";
19345 +    *label TYPE = "Node Type";
19346 +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19347 +    run;
19348 +data _tmp(keep=NODEID TYPE LABEL);
19349 +    set &indata;
19350 +    length TYPE $16;
19351 +    rename CLUSNAME = NODEID;
19352 +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19353 +    TYPE = "GCLUSTER";
19354 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19355 +    run;
19356 +proc sort data=_tmp;
19357 +    by NODEID;
19358 +run;
19359 +data _tmp;
19360 +    set _tmp; by NODEID;
19361 +    if first.NODEID then output;
19362 +run;
19363 +proc sort data=&outnode;
19364 +    by NODEID;
19365 +run;
19366 +data  &outnode;
19367 +    set _tmp &outnode;
19368 +run;
19369 +proc datasets lib = work nolist;
19370 +     delete _tmp;
19371 +run;
19372 +quit;
19373 +%mend MakeGobalConstellData;
19374 +
19375 +/* Make contellation plot data among GCLUSTERS */
19376 +
19377 +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
19378 +
19379 +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
19380 +     set &indata;
19381 +     LINKID = _N_;
19382 +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
19383 +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
19384 +     end;
19385 +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
19386 +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
19387 +     end;
19388 +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
19389 +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
19390 +    end;
19391 +run;
19392 +
19393 +data _tmp_outrsquare;
19394 +        set &inoutrsq;
19395 +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
19396 +run;
19397 +
19398 +proc freq data =_tmp_outrsquare noprint;
19399 +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
19400 +run;
19401 +
19402 +data &outnode(keep=_NAME_ TYPE LABEL);
19403 +    set &outlink;
19404 +    length TYPE $16;
19405 +    length LABEL $100;
19406 +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
19407 +
19408 +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
19409 +    TYPE = "GCLUSTER";
19410 +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
19411 +    end;
19412 +    else do;
19413 +    TYPE= "ROOT";
19414 +    LABEL= _NAME_;
19415 +    end;
19416 +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19417 +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
19418 +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19419 +    run;
19420 +
19421 +proc sort data=&outnode;
19422 +     by _NAME_;
19423 +proc sort data=_tmp_GCLUSFREQ;
19424 +     by _NAME_;
19425 +run;
19426 +
19427 +data  &outnode;
19428 +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
19429 +     if COUNT=. then COUNT=1;
19430 +run;
19431 +
19432 +proc datasets lib = work nolist;
19433 +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
19434 +run;
19435 +
19436 +quit;
19437 +%Mend MakeGClusterConstData;
19438 +
19439 +
19440 +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
19441 +
19442 +    data _gscoretmpds;
19443 +          set &indata;
19444 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
19445 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
19446 +          if _TYPE_ = 'STD' then _NAME_='STD';
19447 +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
19448 +          DROP _TYPE_ _NCL_;
19449 +     run;
19450 +
19451 +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
19452 +        GCluster Component &globalclusid ------ */
19453 +
19454 +    filename _file_  "&fileref";
19455 +
19456 +    data _null_;
19457 +        %if &globalclusid eq 1 %then %do;
19458 +          FILE _file_;
19459 +        %end;
19460 +        %else %do;
19461 +          FILE _file_ MOD;
19462 +        %end;
19463 +
19464 +        %let dsid = %sysfunc(open(work._gscoretmpds));
19465 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
19466 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
19467 +
19468 +        %let k = 1;
19469 +        %do %while(^%sysfunc(fetch(&dsid)));
19470 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19471 +                %if &k > 2 %then %do;
19472 +                put "&_name = 0 ; ";
19473 +                %end;
19474 +                %let k = %eval(&k+1);
19475 +        %end;
19476 +
19477 +        %let rc = %sysfunc(rewind(&dsid));
19478 +        %do i= 2 %to &nvar;
19479 +            %let _varname =  %sysfunc(varname(&dsid, &i));
19480 +            %do %while(^%sysfunc(fetch(&dsid)));
19481 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19482 +                %if &_name = MEAN %then
19483 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
19484 +                %else %if &_name = STD %then
19485 +                %let _std = %sysfunc(getvarn(&dsid, &i));
19486 +                %else %do;
19487 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
19488 +                      %let abscoeff = %sysfunc(abs(&coeff));
19489 +                          %if &abscoeff >  0 %then %do;
19490 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
19491 +                           %end;
19492 +                 %end;
19493 +             %end;
19494 +             %let rc = %sysfunc(rewind(&dsid));
19495 +
19496 +         %end;
19497 +
19498 +        %let dsid= %sysfunc(close(&dsid));
19499 +       run;
19500 +
19501 +
19502 +       proc datasets lib=work nolist;
19503 +            delete _gscoretmpds;
19504 +       run;
19505 +      quit;
19506 +
19507 +%mend CreateGClusterScoreCode;
19508 +
19509 +
19510 +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
19511 +
19512 +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
19513 +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
19514 +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
19515 +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
19516 +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
19517 +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
19518 +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
19519 +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
19520 +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
19521 +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
19522 +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
19523 +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
19524 +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
19525 +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
19526 +
19527 +   filename gsfile "&gscorecode";
19528 +
19529 +   data &EM_USER_GSCORE;
19530 +             set &indata;
19531 +             %include  gsfile;
19532 +        keep
19533 +        %do i=1 %to &ngcluster;
19534 +         %let gcvarname = GC&i;
19535 +         &gcvarname
19536 +        %end;
19537 +     ;
19538 +   run;
19539 +
19540 +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
19541 +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
19542 +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
19543 +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
19544 +    noprint  ;
19545 +     var
19546 +       %do i=1 %to &ngcluster;
19547 +         %let gcvarname = GC&i;
19548 +         &gcvarname
19549 +        %end;
19550 +   ;
19551 +   run;
19552 +
19553 +
19554 +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
19555 +   data &EM_USER_GSCORECORRPLOT ;
19556 +        set &EM_USER_GSCORECORRPLOT;
19557 +        rename _X_ = X;
19558 +        rename _Y_ = Y;
19559 +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19560 +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19561 +   run;
19562 +
19563 +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
19564 +
19565 +   data &EM_USER_GSCORETREE;
19566 +        length _NAME_ $32;
19567 +        length _LABEL_ $100;
19568 +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
19569 +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
19570 +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
19571 +        end;else do;
19572 +         _LABEL_ = _NAME_;
19573 +        end;
19574 +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
19575 +
19576 +   run;
19577 +
19578 +   quit;
19579 +
19580 +%mend MakeGClusterCorrelation;
19581 +
19582 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE.SOURCE.
19583 +%macro score;
19584 +
19585 +filename temp catalog 'sashelp.emexpl.variableclustering_score_macros.source';
19586 +%include temp;
19587 +filename temp;
19588 +
19589 +%EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
19590 +
19591 +data _null_;
19592 +         set &EM_USER_VARCLUSMETA;
19593 +         if _N_=1 then
19594 +         call symput('_trainnum', TrainNum);
19595 +         call symput('_exportedcomp', ExportedComp);
19596 +         call symput('_hidevariable', HideVariable);
19597 +         call symput('_newTrain', NewTrain);
19598 +run;
19599 +
19600 +%if &_newTrain = N %then %do;
19601 +        %if &EM_PROPERTY_EXPORTEDCOMP eq &_exportedcomp %then %let _exportedCompChanged = N;
19602 +        %else %let _exportedCompChanged = Y;
19603 +        %if &EM_PROPERTY_HIDEVARIABLE eq &_hidevariable %then %let _hideVariableChanged = N;
19604 +        %else  %let _hideVariableChanged = Y;
19605 +%end;
19606 +%else %do;
19607 +        %let _exportedCompChanged = Y;
19608 +        %let _hideVariableChanged = Y;
19609 +%end;
19610 +
19611 +%if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
19612 +     filename temp catalog 'sashelp.emexpl.variableclustering_score1.source';
19613 +     %include temp;
19614 +     filename temp;
19615 +     %score1(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
19616 +%end;
19617 +%if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
19618 +     filename temp catalog 'sashelp.emexpl.variableclustering_score2.source';
19619 +     %include temp;
19620 +     filename temp;
19621 +     %score2(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
19622 +%end;
19623 +
19624 +  /* store  current property values */
19625 + data &EM_USER_VARCLUSMETA;
19626 +       set &EM_USER_VARCLUSMETA;
19627 +        ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
19628 +        HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
19629 + run;
19630 +
19631 +%mend score;
19632 +
19633 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE_MACROS.SOURCE.
19634 +
19635 +%macro ChangeVariableSelectionFlag(Indata=, gcluster=);
19636 +     proc sort data =&indata;
19637 +              by Cluster RsqRatio Type;
19638 +     run;
19639 +     /*----------------------------------------------------------------------
19640 +      The Type variabe is used becuse the variable need to be selected
19641 +        instead of Cluster component when only one variable is in the cluster
19642 +     +-----------------------------------------------------------------------*/
19643 +
19644 +     %if &EM_PROPERTY_EXPORTEDCOMP eq CLUSTERCOMP %then %do;
19645 +         data &indata;
19646 +              set &indata; by cluster;
19647 +              if first.Cluster then Selected = 'YES';
19648 +              else Selected = 'NO';
19649 +         run;
19650 +         quit;
19651 +    %end;
19652 +    %else %do;
19653 +         data &indata(drop = _var _varchange);
19654 +              set &indata; retain _var 0; by Cluster;
19655 +             if first.Cluster then  _varchange = 0;
19656 +                 else _varchange =1;
19657 +             if _var ne _varchange then  Selected  = 'YES';
19658 +             else Selected = 'NO';
19659 +             if last.cluster then  _var = 0;
19660 +             else _var = _varchange;
19661 +         run;
19662 +         quit;
19663 +    %end;
19664 +%mend ChangeVariableSelectionFlag;
19665 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      3:15
NOTE: There were 1 observations read from the data set EMWS1.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE1.SOURCE.
19666 +
19667 +%macro score1(ExportedCompChanged=,
19668 +              HideVariableChanged=);
19669 +
19670 +   %EM_GETNAME(KEY=OUTRSQUARE, TYPE=DATA);
19671 +   %if &ExportedCompChanged = Y %then %do;
19672 +   %ChangeVariableSelectionFlag(Indata=&EM_USER_OUTRSQUARE);
19673 +   %end;
19674 +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
19675 +
19676 +%mend score1;
19677 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: There were 44 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS1.VARCLUS_OUTRSQUARE has 44 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 44 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS1.VARCLUS_OUTRSQUARE has 44 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file X is:
      Filename=C:\Users\Dinis\Google Drive\Intelligent_Systems_MSc\Artificial_Neural_Networks\Assignments\KDD Project\KDD_SAS\Workspaces\EMWS1\VarClus\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=27 March 2017 22:39:53 o'clock,
      Create Time=27 March 2017 22:27:57 o'clock
 
NOTE: 17 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 75.
NOTE: There were 44 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref X has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS1.VARCLUS_VARCLUSMETA.
NOTE: The data set EMWS1.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19678  *------------------------------------------------------------*;
19679  * End SCORE: VarClus;
19680  *------------------------------------------------------------*;
19681
 
19682  filename emflow "C:\Users\Dinis\Google Drive\Intelligent_Systems_MSc\Artificial_Neural_Networks\Assignments\KDD Project\KDD_SAS\Workspaces\EMWS1\VarClus\EMFLOWSCORE.sas";
19683  *------------------------------------------------------------*;
19684  * VarClus: Scoring DATA data;
19685  *------------------------------------------------------------*;
19686  data EMWS1.VarClus_TRAIN
19687  / view=EMWS1.VarClus_TRAIN
19688  ;
19689  set EMWS1.Smpl2_DATA
19690  ;
19691  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Dinis\Google Drive\Intelligent_Systems_MSc\Artificial_Neural_Networks\Assignments\KDD Project\KDD_SAS\Workspaces\EMWS1\VarClus\EMFLOWSCORE.sas.
19692 +
19693 +/*-------------------------------------------------*/
19694 +/* Varclus Score Code Begins*/
19695 +/*-------------------------------------------------*/
19696 +
19697 +Clus1 = 0 ; /*---Cluster Component 1------ */
19698 +Clus2 = 0 ; /*---Cluster Component 2------ */
19699 +Clus3 = 0 ; /*---Cluster Component 3------ */
19700 +Clus4 = 0 ; /*---Cluster Component 4------ */
19701 +Clus5 = 0 ; /*---Cluster Component 5------ */
19702 +Clus6 = 0 ; /*---Cluster Component 6------ */
19703 +Clus7 = 0 ; /*---Cluster Component 7------ */
19704 +Clus8 = 0 ; /*---Cluster Component 8------ */
19705 +Clus9 = 0 ; /*---Cluster Component 9------ */
19706 +Clus10 = 0 ; /*---Cluster Component 10------ */
19707 +Clus3 = Clus3+0.33920407139737 * (count - 332.201509831105)/213.217222156534;
19708 +Clus6 = Clus6+0.43240409576885 * (diff_srv_rate - 0.02120493022596)/0.08346646089111;
19709 +Clus9 = Clus9+1 * (dst_bytes - 929.710379582873)/39713.1490694484;
19710 +Clus5 = Clus5+-0.47485438216808 * (dst_host_count - 232.850372903996)/64.2048298133644;
19711 +Clus6 = Clus6+0.5315761651809 * (dst_host_diff_srv_rate - 0.03118671510539)/0.11032280816427;
19712 +Clus2 = Clus2+0.25070368592258 * (dst_host_rerror_rate - 0.05836094273368)/0.2308848864234;
19713 +Clus3 = Clus3+0.33890413348704 * (dst_host_same_src_port_rate - 0.60238577601472)/0.48136072292531;
19714 +Clus1 = Clus1+-0.14545763734009 * (dst_host_same_srv_rate - 0.75359910543518)/0.41083935191684;
19715 +Clus1 = Clus1+0.15429012242761 * (dst_host_serror_rate - 0.17647395743733)/0.38033414102956;
19716 +Clus1 = Clus1+-0.14233782583577 * (dst_host_srv_count - 188.58807516773)/106.059927556047;
19717 +Clus5 = Clus5+0.43698184820895 * (dst_host_srv_diff_host_rate - 0.00663263137655)/0.04234031751855;
19718 +Clus2 = Clus2+0.25088990485261 * (dst_host_srv_rerror_rate - 0.05778979750857)/0.23077804759652;
19719 +Clus1 = Clus1+0.15420874945235 * (dst_host_srv_serror_rate - 0.17604822959147)/0.38059506395295;
19720 +Clus6 = Clus6+0.34589257227867 * (duration - 50.8572238132343)/742.912345725433;
19721 +Clus2 = Clus2+0.01064497855988 * (failed_logins - 0.00014167316001)/0.01190187053408;
19722 +Clus4 = Clus4+0.22621588938694 * (file_creations - 0.00134589502018)/0.10053697215434;
19723 +Clus8 = Clus8+0.69103613583644 * (hot - 0.03431526325908)/0.77032484167275;
19724 +Clus7 = Clus7+0.68179039955206 * (num_access_files - 0.00107266821157)/0.0348310641745;
19725 +Clus4 = Clus4+0.41661249264596 * (num_compromised - 0.00503951669213)/0.10672172890742;
19726 +Clus4 = Clus4+0.35932566930758 * (num_root - 0.00554549226363)/0.22839924555051;
19727 +Clus4 = Clus4+0.39093254630606 * (num_shells - 0.00010119511429)/0.01190228352639;
19728 +Clus2 = Clus2+0.25151558086893 * (rerror_rate - 0.05764782076321)/0.23194118161119;
19729 +Clus7 = Clus7+0.68179039955206 * (root_shell - 0.00013155364858)/0.01146898745855;
19730 +Clus1 = Clus1+-0.14948980206502 * (same_srv_rate - 0.79126139709974)/0.38831097362964;
19731 +Clus1 = Clus1+0.15426941878118 * (serror_rate - 0.17641850251469)/0.38045331249686;
19732 +Clus8 = Clus8+0.69103613583644 * (src_bytes - 1688.59295277224)/61069.1069324083;
19733 +Clus3 = Clus3+0.34938877504878 * (srv_count - 292.837743753731)/246.364929820423;
19734 +Clus5 = Clus5+0.38748829831568 * (srv_diff_host_rate - 0.02921411874234)/0.14292633027821;
19735 +Clus2 = Clus2+0.25131050219411 * (srv_rerror_rate - 0.05803762434349)/0.2327390817564;
19736 +Clus1 = Clus1+0.15417328994478 * (srv_serror_rate - 0.17621388599358)/0.38066524120111;
19737 +Clus4 = Clus4+0.15168711426685 * (su_attempt - 0.00003035853428)/0.0055098021613;
19738 +Clus10 = Clus10+1 * (urgent - 0.00001011951142)/0.00318111795285;
19739 +Clus3 = Clus3+-0.02665007888321 * (wrng_frags - 0.00641577024661)/0.13451091208105;
NOTE: %INCLUDE (level 1) ending.
19740  run;
 
NOTE: DATA STEP view saved on file EMWS1.VARCLUS_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19741  quit;
19742  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
19744  *------------------------------------------------------------*;
19745  * VarClus: Computing metadata for TRAIN data;
19746  *------------------------------------------------------------*;
 
NOTE: View EMWS1.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS1.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                27 March 2017
Time:                22:39:53 o'clock
*------------------------------------------------------------*
20124  %let EMEXCEPTIONSTRING=;
20125  *------------------------------------------------------------*;
20126  * REPORT: VarClus;
20127  *------------------------------------------------------------*;
20128  %let EM_ACTION = REPORT;
20129  %let syscc = 0;
20130
20131  %macro main;
20132
20133     filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
20134     %include temp;
20135     filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
20136     %include temp;
20137     filename temp;
20138
20139    %SetProperties;
20140
20141     %if %upcase(&EM_ACTION) = CREATE %then %do;
20142         filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
20143         %include temp;
20144         filename temp;
20145         %create;
20146     %end;
20147     %else
20148     %if %upcase(&EM_ACTION) = TRAIN %then %do;
20149          filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
20150             %include temp;
20151             filename temp;
20152             %train;
20153     %end;
20154     %else
20155     %if %upcase(&EM_ACTION) = SCORE %then %do;
20156             filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
20157             %include temp;
20158             filename temp;
20159             %score;
20160     %end;
20161     %else
20162     %if %upcase(&EM_ACTION) = REPORT %then %do;
20163             filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
20164             %include temp;
20165             filename temp;
20166             %report;
20167     %end;
20168     /*
20169     %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
20170         %put 'OPENING TABLE';
20171     %end;
20172     %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
20173         %put 'CLOSE TABLE';
20174     %end;
20175     */
20176  %mend main;
20177  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
20178 +
20179 +/* Initialize property macro variables */
20180 +%macro SetProperties;
20181 +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
20182 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
20183 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
20184 +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
20185 +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
20186 +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
20187 +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
20188 +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
20189 +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
20190 +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
20191 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
20192 +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
20193 +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
20194 +
20195 +%mend SetProperties;
20196 +
20197 +%Macro MakeDummyVariables(indata=,
20198 +                          outvar=,
20199 +                          outdata=,
20200 +                          fileref=,
20201 +                          recreatecmeta=N, /* optional */
20202 +                          incmeta=,     /* optional */
20203 +                          outcmeta=,    /* optional */
20204 +                          ndummyvars=_ndummyvars
20205 +                          );
20206 +    %global &ndummyvars;
20207 +
20208 +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
20209 +       class
20210 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
20211 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
20212 +    ;
20213 +    run;
20214 +    %let &ndummyvars = 0;
20215 +    data _null_;
20216 +    %let dsid = %sysfunc(open(work._classout));
20217 +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
20218 +    %let dsid = %sysfunc(close(&dsid));
20219 +    run;
20220 +
20221 +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
20222 +       input
20223 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
20224 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
20225 +        / level=nominal stdize=no;
20226 +       make outvar = &outvar;
20227 +       score data = &indata out =&outdata;
20228 +       code  file=  "&fileref";
20229 +    run;
20230 +    %if &recreatecmeta eq Y %then %do;
20231 +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
20232 +    data _tmpds;
20233 +        set _tmpds;
20234 +           ROLE = 'INPUT';
20235 +           LEVEL = 'INTERVAL';
20236 +           CREATOR='DMZIP';
20237 +           if NAME = '_TYPE_' then delete;
20238 +    run;
20239 +    data &outcmeta;
20240 +         set &incmeta _tmpds;
20241 +    run;
20242 +    %end;
20243 +    proc datasets lib=work nolist;
20244 +      delete  _dmdbdat _dmdbcat _classout
20245 +    %if &recreatecmeta eq Y %then %do;
20246 +    _tmpds
20247 +    %end;
20248 +    ;
20249 +    quit;
20250 +%Mend MakeDummyVariables;
20251 +
20252 +/*--- Determine Optimal Number of Cluster ----
20253 +%macro FindClusNum(statds=, groupds=, minvariation=);
20254 +   %global optnclus;
20255 +   data varclus_tmp(drop=_NAME_);
20256 +      set &statDs;
20257 +      where _type_ ='PROPOR';
20258 +   run;
20259 +   proc sort data=varclus_tmp;
20260 +      by _NCL_;
20261 +   run;
20262 +   proc transpose data=varclus_tmp out=varclus_tmp;
20263 +      by _NCL_;
20264 +      var %EM_INTERVAL_INPUT
20265 +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
20266 +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
20267 +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
20268 +          %do i = 2 %to &nvar;
20269 +          %let varname = %sysfunc(varname(&dsid, &i));
20270 +          &varname
20271 +          %end;
20272 +      %end;
20273 +   ;
20274 +   run;
20275 +
20276 +   %if &minVariation eq %then %do;
20277 +       %let minVariation = &EM_PROPERTY_MINVARIATION;
20278 +   %end;
20279 +   %if ^(0<&minVariation<100) %then %do;
20280 +       %let minVariation = 90;
20281 +   %end;
20282 +
20283 +   data _null_;
20284 +      set varclus_tmp end=eof;
20285 +      by _NCL_;
20286 +      retain flag 0;
20287 +      if first._ncl_ then flag=0;
20288 +      if .<col1 < &minVariation then flag=1;
20289 +      if last._ncl_ and ^flag then do;
20290 +         call symput('OPTNCL', _ncl_);
20291 +         stop;
20292 +      end;
20293 +     if eof then call symput('OPTNCL', _ncl_);
20294 +   run;
20295 +
20296 +   %let optnclus = &OPTNCL;
20297 +
20298 +   data varclus_tmp(drop=_NCL_ _NAME_);
20299 +      set &statDs;
20300 +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
20301 +   run;
20302 +   proc sort data=varclus_tmp;
20303 +      by _TYPE_;
20304 +   run;
20305 +   proc transpose data=varclus_tmp out=varclus_tmp;
20306 +      by _TYPE_;
20307 +   run;
20308 +   proc sort data=varclus_tmp;
20309 +      by _name_ _type_;
20310 +   run;
20311 +
20312 +  proc transpose data=varclus_tmp out=&groupds;
20313 +      by _NAME_;
20314 +   run;
20315 +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
20316 +      by Cluster descending Rsquare;
20317 +      where Cluster ne 0;
20318 +   run;
20319 +   proc datasets lib=work nolist mt=(DATA VIEW);
20320 +      delete varclus_tmp;
20321 +   run;
20322 +   quit;
20323 +%mend findClusNum;
20324 +*/
20325 +
20326 +%macro getNclusfromTrain(inoutstat=, nc=);
20327 +%global &nc;
20328 +data _null_;
20329 +    set &inoutstat end=eof;
20330 +    if eof then do;
20331 +    call symput("&nc", _ncl_);
20332 +    end;
20333 +run;
20334 +%mend  getNclusfromTrain;
20335 +
20336 +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
20337 +
20338 +     *--- Build Code to Modify Metadata ---*;
20339 +     filename X "&deltacodefile";
20340 +     data _null_;
20341 +        FILE X;
20342 +        set &groupds end=eof;
20343 +        /*by Cluster;*/
20344 +         if _N_=1 then do;
20345 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
20346 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
20347 +           %end;
20348 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
20349 +           put "if upcase(strip(NAME)) in (";
20350 +        end;
20351 +        if Strip(upcase(Selected)) eq 'YES' then do;
20352 +           string = '"'!!trim(left(VARIABLE))!!'"';
20353 +           put string;
20354 +        end;
20355 +        if eof then do;
20356 +           put ') then ROLE="INPUT";';
20357 +           put 'else ROLE="REJECTED";';
20358 +           put 'end;';
20359 +
20360 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
20361 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
20362 +           %end;
20363 +        end;
20364 +     run;
20365 +     quit;
20366 +
20367 +     filename X;
20368 +
20369 +     quit;
20370 +%mend MakeDeltaCode;
20371 +
20372 +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
20373 +    %if ^%sysfunc(exist(&statds)) %then %do;
20374 +         %goto doendc;
20375 +    %end;
20376 +
20377 +    data &corrds(drop=_TYPE_ _NCL_) ;
20378 +       set &statds;
20379 +       where _type_ eq 'CORR' ;
20380 +    run ;
20381 +    proc sort data=&corrds;
20382 +       by _NAME_ ;
20383 +    run ;
20384 +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
20385 +      BY _NAME_ ;
20386 +    run ;
20387 +    data &corrplotds;
20388 +       length _Y_ $100;
20389 +       set &corrplotDs;
20390 +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
20391 +    run ;
20392 +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
20393 +       set &corrplotds;
20394 +       where _LABEL_ ne '' ;
20395 +       keep _TMP_ _LABEL_ ;
20396 +    run ;
20397 +    data _null_;
20398 +       nobs=0;
20399 +       dsid = open('varclus_match');
20400 +       if dsid then do;
20401 +          nobs = attrn(dsid, 'NOBS');
20402 +          dsid = close(dsid);
20403 +       end;
20404 +       call symput ('CORR_NOBS', nobs);
20405 +    run;
20406 +    %if &corr_nobs %then %do;
20407 +        proc sort data=varclus_match;
20408 +           by _name_;
20409 +        run ;
20410 +        proc sort data=&corrplotds;
20411 +           by _name_;
20412 +        run ;
20413 +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
20414 +           merge varclus_match &corrplotds;
20415 +           by _NAME_ ;
20416 +           if _X_ eq '' then _X_=_NAME_ ;
20417 +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
20418 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
20419 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
20420 +
20421 +       run ;
20422 +    %end;
20423 +    %else %do;
20424 +        proc sort data=&corrplotds;
20425 +           by _name_;
20426 +        run ;
20427 +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
20428 +           set &corrplotds;
20429 +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
20430 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
20431 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
20432 +
20433 +        run ;
20434 +    %end;
20435 +    proc sort data=&corrplotds;
20436 +       by _X_ _Y_;
20437 +    run ;
20438 +    proc datasets lib=work nolist mt=(DATA VIEW);
20439 +       delete varclus_match;
20440 +    run;
20441 +    quit;
20442 +
20443 +%doendc:
20444 +
20445 +%mend MakeVarClusCorrData;
20446 +
20447 +%macro MakeStatPlotData(statds= , outstatplotds=);
20448 +   %if %sysfunc(exist(&statds)) %then %do;
20449 +
20450 +       data varclus_tmp(drop=_NAME_ _NCL_) ;
20451 +          set &statDs;
20452 +          where _type_ in('MEAN', 'STD', 'N');
20453 +       run ;
20454 +       proc transpose data=varclus_tmp out=&outstatplotds;
20455 +          id _TYPE_ ;
20456 +       run ;
20457 +       data &outstatplotds;
20458 +          set &outstatplotds(obs=1000);
20459 +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
20460 +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
20461 +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
20462 +          else SCALEDSTD= STD ;
20463 +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
20464 +       run ;
20465 +       proc sort data=&outstatplotds;
20466 +          by descending SCALEDSTD ;
20467 +       run ;
20468 +       proc datasets lib=work nolist mt=(DATA VIEW);
20469 +          delete varclus_tmp;
20470 +       run;
20471 +       quit;
20472 +    %end;
20473 +
20474 +%mend MakeStatPlotData;
20475 +
20476 +
20477 +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
20478 +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
20479 +    data &EM_USER_OUTSTATSCORE;
20480 +          set &indata;
20481 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
20482 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
20483 +          if _TYPE_ = 'STD' then _NAME_='STD';
20484 +          DROP _TYPE_ _NCL_;
20485 +     run;
20486 +
20487 +     filename _file_  "&fileRef";
20488 +
20489 +     data _null_;
20490 +        FILE _file_ MOD;
20491 +        put ' ';
20492 +        put '/*-------------------------------------------------*/';
20493 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
20494 +        put '/*-------------------------------------------------*/';
20495 +        put ' ';
20496 +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
20497 +
20498 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
20499 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
20500 +
20501 +        %let k = 1;
20502 +        %do %while(^%sysfunc(fetch(&dsid)));
20503 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
20504 +                %if &k > 2 %then %do;
20505 +                 %let cn = %eval(&k-2);
20506 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
20507 +                %end;
20508 +                %let k = %eval(&k+1);
20509 +        %end;
20510 +
20511 +        %let rc = %sysfunc(rewind(&dsid));
20512 +
20513 +        %do i= 2 %to &nvar;
20514 +            %let _varname =  %sysfunc(varname(&dsid, &i));
20515 +            %do %while(^%sysfunc(fetch(&dsid)));
20516 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
20517 +                %if &_name = MEAN %then
20518 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
20519 +                %else %if &_name = STD %then
20520 +                %let _std = %sysfunc(getvarn(&dsid, &i));
20521 +                %else %do;
20522 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
20523 +                      %let abscoeff = %sysfunc(abs(&coeff));
20524 +                          %if &abscoeff >  0 %then %do;
20525 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
20526 +                           %end;
20527 +                 %end;
20528 +             %end;
20529 +             %let rc = %sysfunc(rewind(&dsid));
20530 +         %end;
20531 +
20532 +        %let dsid= %sysfunc(close(&dsid));
20533 +       run;
20534 +%mend CreateScoreCode;
20535 +
20536 +
20537 +
20538 +/*----------------------------------------------------------
20539 +    Instead of using %MakeRSquareData,
20540 +    %MakeVarClusResultTable at macro2.source is used
20541 + +----------------------------------------------------------*/
20542 +
20543 +
20544 +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
20545 +
20546 +/* modifying  from ods rsquare = data */
20547 +
20548 +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
20549 +    Length Cluster $16;
20550 +    length Variable $32;
20551 +    Length VariableLabel $64;
20552 +    set &indata; retain CurrentCluster;
20553 +    if NumberOfClusters ^= &ncluster then delete;
20554 +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
20555 +    CurrentCluster = Cluster;
20556 +   run;
20557 +proc sort data =&outdata ;
20558 +     by Cluster RsquareRatio;
20559 +run;
20560 +data _tmprsq(drop=index);
20561 +     set &outdata; by Cluster;
20562 +     if first.Cluster then do;
20563 +     index = strip(scan(Cluster,2 ));
20564 +     Variable = "Clus"||index;
20565 +     VariableLabel = "Cluster Component "||index;
20566 +     OwnCluster = 1;
20567 +     NextClosest = .;
20568 +     RsquareRatio = 0;
20569 +     output;
20570 +     end;
20571 +run;
20572 +
20573 +proc sort data = _tmprsq ;
20574 +     by Cluster RsquareRatio;
20575 +run;
20576 +data &outdata;
20577 +     set &outdata _tmprsq;
20578 +by Cluster;
20579 +run;
20580 +
20581 +
20582 +/* Just create the Selected variable with all YES */
20583 +
20584 +data &outdata;
20585 +    set &outdata; by cluster;
20586 +    length Selected $8;
20587 +    Selected = 'YES';
20588 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
20589 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
20590 +    rename OwnCluster = RSqWithClusterComp;
20591 +    rename NextClosest = RSqWithNextClusComp;
20592 +run;
20593 +
20594 +
20595 +/* Selected = Y/N will be done %score section -----
20596 +
20597 +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
20598 +data &outdata;
20599 +    set &outdata; by cluster;
20600 +    length Selected $8;
20601 +    if first.Cluster then Selected = 'YES';
20602 +    else Selected = 'NO';
20603 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
20604 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
20605 +    rename OwnCluster = RSqWithClusterComp;
20606 +    rename NextClosest = RSqWithNextClusComp;
20607 +run;
20608 +%end;
20609 +%else %do;
20610 +data &outdata;
20611 +    set &outdata; by cluster;
20612 +    if last.Cluster then Selected = 'YES';
20613 +    else Selected = 'NO';
20614 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
20615 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
20616 +    rename OwnCluster = RSqWithClusterComp;
20617 +    rename NextClosest = RSqWithNextClusComp;
20618 +run;
20619 +%end;
20620 +---------------------------------------------------------------*/
20621 +
20622 +%if %sysfunc(exist(&inClusRSquare)) %then %do;
20623 +/* to calculate NextClosestClusRsq */
20624 +proc transpose data = &inClusRSquare  out=_clusRsq;
20625 +      by cluster;
20626 +      run;
20627 +data _clusRsq;
20628 +     set _clusRsq;
20629 +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
20630 +run;
20631 +
20632 +proc sort data=_clusRsq;
20633 +    by cluster col1;
20634 +    run;
20635 +data _clusRsq(drop=_NAME_ _LABEL_);
20636 +     set _clusRsq; by cluster;
20637 +     if last.Cluster then output;
20638 +     label  COL1 = 'R-Sqaure with Next Cluster Component';
20639 +     rename COL1 = RSqWithNextClusComp;
20640 +     rename Cluster = Variable;
20641 +     label  Cluster = "Variable";
20642 +run;
20643 +
20644 +proc sort data =&outdata;
20645 +     by Variable;
20646 +run;
20647 +data &outdata;
20648 +    merge &outdata _clusRsq;
20649 +    by Variable;
20650 +run;
20651 +proc sort data =&outdata;
20652 +by Cluster  RsquareRatio;
20653 +run;
20654 +quit;
20655 +%end;
20656 +
20657 +proc datasets lib = work nolist;
20658 +     delete _tmprsq _clusRsq;
20659 +     run;
20660 +quit;
20661 +
20662 +%mend MakeRSquareData;
20663 +
20664 +
20665 +/*-------------------------------------------------------------------------*/
20666 +
20667 +
20668 +
20669 +%macro ModifyCorr(indata=,
20670 +                  outdata=,
20671 +                  rsquare = Y
20672 +                  );
20673 +    data corr_tmp;
20674 +        set &indata;
20675 +    run;
20676 +     proc sql;
20677 +           update &indata
20678 +           set
20679 +     %let dsid = %sysfunc(open(work.corr_tmp));
20680 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
20681 +          %do i = 4 %to &nvar;
20682 +          %let _name = %sysfunc(varname(&dsid, &i));
20683 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
20684 +            %else  %let _name_md = &_name;
20685 +            %if &i < &nvar %then %do;
20686 +               &_name = 1- &_name_md ,
20687 +            %end;
20688 +            %else %do;
20689 +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
20690 +            %end;
20691 +          %end;
20692 +      %let dsid= %sysfunc(close(&dsid));
20693 +
20694 +      select * from &indata;
20695 +      run;
20696 +      proc datasets lib = work nolist;
20697 +           delete corr_tmp;
20698 +      run;
20699 +      quit;
20700 +
20701 + %mend ModifyCorr;
20702 +
20703 + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
20704 +    data &outdata(drop= _NCL_  _TYPE_);
20705 +       set &indata;
20706 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
20707 +       rename _NAME_ = Cluster;
20708 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
20709 +    run;
20710 +    %if &RSquare eq Y %then %do;
20711 +     data corr_tmp;
20712 +        set &outdata;
20713 +     run;
20714 +
20715 +     data &outdata(drop=i);
20716 +          set &outdata;
20717 +          %let dsid = %sysfunc(open(work.corr_tmp));
20718 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
20719 +          %do i = 2 %to &nvar;
20720 +            %let _name = %sysfunc(varname(&dsid, &i));
20721 +            %let _name_md = &_name.**2;
20722 +                &_name = &_name_md;
20723 +          %end;
20724 +      %let dsid= %sysfunc(close(&dsid));
20725 +      run;
20726 +      proc datasets lib = work nolist;
20727 +           delete corr_tmp;
20728 +      run;
20729 +
20730 +    %end;
20731 +     quit;
20732 +%mend MakeClusStructCorrData;
20733 +
20734 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
20735 +    data &outdata(drop= _NCL_  _TYPE_);
20736 +       set &indata;
20737 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
20738 +       rename _NAME_ = Cluster;
20739 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
20740 +    run;
20741 +    data corr_tmp;
20742 +        set &outdata;
20743 +    run;
20744 +
20745 +    %let dsid = %sysfunc(open(work.corr_tmp));
20746 +    %let nclus2= %eval(&ncluster+1);
20747 +    data &outdata;
20748 +         set &outdata;
20749 +          %do i = 2 %to &nclus2;
20750 +          %let i_1 = %eval(&i-1);
20751 +            %let _name = %sysfunc(varname(&dsid, &i));
20752 +            %let _newName = Clus&i_1;
20753 +                rename &_name = &_newName; ;
20754 +                *label &_name ="Cluster &i_1";
20755 +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
20756 +          %end;
20757 +          keep Cluster
20758 +          %do i = 2 %to &nclus2;
20759 +                %let _name = %sysfunc(varname(&dsid, &i));
20760 +                &_name
20761 +          %end;
20762 +          ;
20763 +    %let dsid= %sysfunc(close(&dsid));
20764 +     run;
20765 +     quit;
20766 +
20767 +    %if &RSquare eq Y %then %do;
20768 +
20769 +       data corr_tmp;
20770 +        set &outdata;
20771 +     run;
20772 +
20773 +     data &outdata(drop=i);
20774 +          set &outdata;
20775 +          %let dsid = %sysfunc(open(work.corr_tmp));
20776 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
20777 +          %do i = 2 %to &nvar;
20778 +            %let _name = %sysfunc(varname(&dsid, &i));
20779 +            %let _name_md = &_name.**2;
20780 +                &_name = &_name_md;
20781 +          %end;
20782 +      %let dsid= %sysfunc(close(&dsid));
20783 +      run;
20784 +    %end;
20785 +
20786 +    %if &makeplotds eq Y %then %do;
20787 +     proc transpose data = &outdata
20788 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
20789 +          by cluster;
20790 +     run;
20791 +     data &plotds;
20792 +          set  &plotds;
20793 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
20794 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
20795 +     run;
20796 +     %end;
20797 +     proc datasets lib = work nolist;
20798 +           delete corr_tmp;
20799 +     run;
20800 +     quit;
20801 +%mend MakeInterClusCorrData;
20802 +
20803 +
20804 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
20805 +
20806 +data &outlink(drop = Selected);
20807 +     set &indata;
20808 +     LINKID = _N_;
20809 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
20810 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
20811 +run;
20812 +data &outnode(keep=NODEID TYPE LABEL);
20813 +    set &indata;
20814 +    length TYPE $16;
20815 +    rename Variable = NODEID;
20816 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
20817 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
20818 +    then  TYPE = "CLUSTER";
20819 +    else  TYPE="VARIABLE";
20820 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
20821 +run;
20822 +quit;
20823 +%mend MakeClusConstellData;
20824 +
20825 +
20826 +
20827 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
20828 +
20829 +data &outlink(drop = Selected);
20830 +     set &indata;
20831 +     LINKID = _N_;
20832 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
20833 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
20834 +run;
20835 +data &outnode(keep=NODEID TYPE LABEL);
20836 +    set &indata;
20837 +    length TYPE $16;
20838 +    rename Variable = NODEID;
20839 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
20840 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
20841 +    then  TYPE = "CLUSTER";
20842 +    else  TYPE="VARIABLE";
20843 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
20844 +run;
20845 +quit;
20846 +%mend MakeClusConstellData;
20847 +
20848 +
20849 +/*--- This will work only when inds is not a view data -------
20850 +
20851 +%macro getNVarNObs(inds=, nvar=, nobs=);
20852 +
20853 +    %global &nvar;
20854 +    %global &nobs;
20855 +    data _null_;
20856 +         dsid = open("&inds");
20857 +         nv = attrn(dsid, 'NVAR');
20858 +         no = attrn(dsid, 'NOBS');
20859 +         dsid = close(dsid);
20860 +         call symput("&nvar", nv);
20861 +         call symput("&nobs", no);
20862 +    run;
20863 +    quit;
20864 +%mend  getNVarNObs;
20865 +
20866 ++---------------------------------------------------------------*/
20867 +
20868 +
20869 +%macro getNVar(inds=, nvar=);
20870 +    %global &nvar;
20871 +    data _null_;
20872 +         dsid = open("&inds");
20873 +         nv = attrn(dsid, 'NVAR');
20874 +         dsid = close(dsid);
20875 +         call symput("&nvar", nv);
20876 +    run;
20877 +    quit;
20878 +%mend  getNVar;
20879 +
20880 +
20881 +
20882 +%macro getNObs(inds=, nobs=);
20883 +    %global &nobs;
20884 +    data _null_;
20885 +        set &inds end=eof;
20886 +        if eof then call symput("&nobs", _N_);
20887 +    run;
20888 +    quit;
20889 +%mend  getNObs;
20890 +
20891 +%Macro CreateVarclusMeta(trainnum=);
20892 +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
20893 +    data &EM_USER_VARCLUSMETA;
20894 +         length TrainNum 8.;
20895 +         length NewTrain $8;
20896 +         length NGCluster 8.;
20897 +         length ExportedComp $16;
20898 +         length HideVariable $8;
20899 +         TrainNum = &trainnum;
20900 +         NewTrain = "Y";
20901 +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
20902 +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
20903 +         NGCluster = 0; /* zero means no twostage */
20904 +   run;
20905 +   quit;
20906 +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
20907 +
20908 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
20909 +    data &outdata(drop= _NCL_  _TYPE_);
20910 +       set &indata;
20911 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
20912 +       %if &globalclusid ne %then %do;
20913 +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
20914 +       rename _NAME_ = Cluster;
20915 +       %end;
20916 +       %else %do;
20917 +        _NAME_ = upcase(_NAME_);
20918 +       rename _NAME_ = Cluster;
20919 +       %end;
20920 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
20921 +    run;
20922 +    data corr_tmp;
20923 +        set &outdata;
20924 +    run;
20925 +
20926 +    %let dsid = %sysfunc(open(work.corr_tmp));
20927 +    %let nclus2= %eval(&ncluster+1);
20928 +    data &outdata;
20929 +         set &outdata;
20930 +          %do i = 2 %to &nclus2;
20931 +          %let i_1 = %eval(&i-1);
20932 +            %let _name = %sysfunc(varname(&dsid, &i));
20933 +            %if &globalclusid ne %then
20934 +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
20935 +                     rename &_name = &_newName;
20936 +                     *label &_name ="GC &globalclusid : Cluster &i_1";
20937 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
20938 +                %end;
20939 +            %else
20940 +                %do; %let _newName = CLUS&i_1;
20941 +                     rename &_name = &_newName;
20942 +                     *label &_name ="Cluster &i_1";
20943 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
20944 +                %end;
20945 +          %end;
20946 +          keep Cluster
20947 +          %do i = 2 %to &nclus2;
20948 +                %let _name = %sysfunc(varname(&dsid, &i));
20949 +                &_name
20950 +          %end;
20951 +          ;
20952 +    %let dsid= %sysfunc(close(&dsid));
20953 +     run;
20954 +     quit;
20955 +
20956 +    %if &RSquare eq Y %then %do;
20957 +
20958 +       data corr_tmp;
20959 +        set &outdata;
20960 +     run;
20961 +
20962 +     data &outdata;
20963 +          set &outdata;
20964 +          %let dsid = %sysfunc(open(work.corr_tmp));
20965 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
20966 +          %do i = 2 %to &nvar;
20967 +            %let _name = %sysfunc(varname(&dsid, &i));
20968 +            %let _name_md = &_name.**2;
20969 +                &_name = &_name_md;
20970 +          %end;
20971 +      %let dsid= %sysfunc(close(&dsid));
20972 +      run;
20973 +    %end;
20974 +
20975 +    %if &makeplotds eq Y %then %do;
20976 +     proc transpose data = &outdata
20977 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
20978 +          by cluster;
20979 +     run;
20980 +     data &plotds;
20981 +          set  &plotds;
20982 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
20983 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
20984 +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
20985 +     run;
20986 +     %end;
20987 +     proc datasets lib = work nolist;
20988 +           delete corr_tmp;
20989 +     run;
20990 +     quit;
20991 +%mend MakeInterClusCorrData;
20992 +
20993 +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
20994 +    data _tmpds(drop= _NCL_);
20995 +       set &indata;
20996 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
20997 +       %if &globalclusid ne %then %do;
20998 +           _NAME_ = "GC&globalclusid.";
20999 +       rename _NAME_ = Cluster;
21000 +       %end;
21001 +       %else %do;
21002 +        _NAME_ = "CLUS";
21003 +        rename _NAME_ = Cluster;
21004 +       %end;
21005 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
21006 +    run;
21007 +    proc transpose data =_tmpds out =&outdata;
21008 +    run;
21009 +
21010 +    data &outdata(drop=COL1);
21011 +        %if &globalclusid ne %then %do;
21012 +        length GCluster $16;
21013 +        %end;
21014 +        length Cluster $32;
21015 +        length _NAME_ $32;
21016 +         set &outdata;
21017 +         _NAME_ = upcase(_NAME_);
21018 +         rename _NAME_=Variable;
21019 +         *label _NAME_="Variable";
21020 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21021 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21022 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21023 +
21024 +         %if &globalclusid ne %then %do;
21025 +          GCluster = "GC&globalclusid";
21026 +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
21027 +         %end;
21028 +         %else %do;
21029 +         Cluster = "CLUS"||strip(COL1);
21030 +        %end;
21031 +         rename COL2 = RSqWithOwnClusComp;
21032 +         *label COL2 = "R-Square With Own Cluster Component";
21033 +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
21034 +
21035 +   run;
21036 +   proc sort data =&outdata;
21037 +        by Cluster RSqWithOwnClusComp;
21038 +   run;
21039 +   proc datasets lib = work nolist;
21040 +           delete _tmpds;
21041 +   run;
21042 +   quit;
21043 +%mend MakeOwnRSquare;
21044 +
21045 +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
21046 +    data &outdata(drop= _NCL_  _TYPE_);
21047 +       %if &globalclusid ne %then %do;
21048 +        length GCluster $16;
21049 +        %end;
21050 +       set &indata;
21051 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
21052 +       %if &globalclusid ne %then %do;
21053 +         GCluster = "GC&globalclusid";
21054 +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
21055 +         rename _NAME_ = Cluster;
21056 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21057 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21058 +
21059 +       %end;
21060 +       %else %do;
21061 +         _NAME_ = upcase(_NAME_);
21062 +         rename _NAME_ = Cluster;
21063 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21064 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21065 +
21066 +       %end;
21067 +     run;
21068 +    %if &RSquare eq Y %then %do;
21069 +     data corr_tmp;
21070 +          set &outdata;
21071 +     run;
21072 +     %let istart = 2;
21073 +     %if &globalclusid ne %then %let istart = 3;
21074 +     data &outdata;
21075 +          set &outdata;
21076 +          %let dsid = %sysfunc(open(work.corr_tmp));
21077 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21078 +          %do i =&istart %to &nvar;
21079 +            %let _name = %sysfunc(varname(&dsid, &i));
21080 +            %let _name_md = &_name.**2;
21081 +                &_name = &_name_md;
21082 +          %end;
21083 +      %let dsid= %sysfunc(close(&dsid));
21084 +      run;
21085 +      proc datasets lib = work nolist;
21086 +           delete corr_tmp;
21087 +      run;
21088 +    %end;
21089 +     quit;
21090 +%mend MakeClusStructCorrData;
21091 +
21092 +/*
21093 +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
21094 +*/
21095 +
21096 +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
21097 +
21098 +     /* The indata should be the outdata
21099 +        from %MakeClusStructCorrData(indata=, outdata=, ); */
21100 +
21101 +     proc sort data =&indata out=_tmpclusRsq;
21102 +     by cluster;
21103 +     run;
21104 +
21105 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
21106 +      by cluster;
21107 +     run;
21108 +
21109 +     proc sort data=_tmpclusRsq;
21110 +        by _NAME_ COL1;
21111 +     run;
21112 +
21113 +     data _tmpclusRsq;
21114 +         length _NAME_ $32;
21115 +         set _tmpclusRsq; by _NAME_;
21116 +          _NAME_ = upcase(_NAME_);
21117 +          %if &ncluster ne 1 %then %do;
21118 +             if last._NAME_ then delete;
21119 +          %end;
21120 +          %else %do;
21121 +             COL1 = 0;
21122 +          %end;
21123 +     run;
21124 +     /* need to sort again */
21125 +     proc sort data=_tmpclusRsq;
21126 +        by _NAME_ COL1;
21127 +     run;
21128 +
21129 +     data &outdata;
21130 +         set _tmpclusRsq; by _NAME_;
21131 +         Cluster = upcase(Cluster);
21132 +         if last._NAME_ then output;
21133 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
21134 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
21135 +         rename COL1 = RSqWithNextClusComp;
21136 +         Cluster = upcase(Cluster);
21137 +         rename Cluster = ClosestCluster;
21138 +         *label  Cluster = "Next Closest Cluster";
21139 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
21140 +         rename _NAME_ = Variable;
21141 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21142 +    run;
21143 +
21144 +
21145 +    %if &globalclusid ne %then %do;
21146 +    data &outdata;
21147 +       length GCluster $16;
21148 +       set &outdata;
21149 +       GCluster = "GC&globalclusid";
21150 +       run;
21151 +    %end;
21152 +    proc datasets lib = work nolist;
21153 +           delete _tmpclusRsq;
21154 +    run;
21155 +    quit;
21156 +%mend FindNextClosestClusByVar;
21157 +
21158 +
21159 +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
21160 +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
21161 +     proc sort data =&indata out=_tmpclusRsq;
21162 +     by cluster;
21163 +     run;
21164 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
21165 +     by cluster;
21166 +     run;
21167 +     proc sort data=_tmpclusRsq;
21168 +        by _NAME_ col1;
21169 +     run;
21170 +     data _tmpclusRsq;
21171 +         length _NAME_ $32;
21172 +         set _tmpclusRsq; by _NAME_;
21173 +          _NAME_ = upcase(_NAME_);
21174 +          %if &ncluster ne 1 %then %do;
21175 +             if last._NAME_ then delete;
21176 +          %end;
21177 +          %else %do;
21178 +             COL1 = 0;
21179 +          %end;
21180 +     run;
21181 +     data &outdata;
21182 +         set _tmpclusRsq; by _NAME_;
21183 +         Cluster = upcase(Cluster);
21184 +         if last._NAME_ then output;
21185 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
21186 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
21187 +         rename COL1 = RSqWithNextClusComp;
21188 +         Cluster = upcase(Cluster);
21189 +         rename Cluster = ClosestCluster;
21190 +         *label  Cluster = "Next Closest Cluster";
21191 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
21192 +         rename _NAME_ = Variable;
21193 +         *label  _NAME_ = "Variable";
21194 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21195 +
21196 +    run;
21197 +    %if &globalclusid ne %then %do;
21198 +    data &outdata;
21199 +       length GCluster $16;
21200 +       set &outdata;
21201 +       GCluster = "GC&globalclusid";
21202 +       run;
21203 +    %end;
21204 +
21205 +    proc datasets lib = work nolist;
21206 +           delete _tmpclusRsq;
21207 +    run;
21208 +
21209 +    quit;
21210 +%mend FindNextClosestClusByCluster;
21211 +
21212 +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
21213 +/*----
21214 +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
21215 +-----------*/
21216 +
21217 +proc sort data =&indata1;
21218 +    by Variable;
21219 +run;
21220 +proc sort data =&indata2;
21221 +    by Variable;
21222 +run;
21223 +data &outdata;
21224 +    merge &indata1 &indata2;
21225 +    by Variable;
21226 +    length Type $16;
21227 +    Type = 'Variable';
21228 +    *label Type ='Type';
21229 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
21230 +run;
21231 +
21232 +
21233 +data &indata3;
21234 +    set  &indata3 ;
21235 +    length RSqWithOwnClusComp 8.;
21236 +    Cluster = Variable;
21237 +    RSqWithOwnClusComp = 1;
21238 +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
21239 +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
21240 +    length Type $16;
21241 +    Type = 'ClusterComp';
21242 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
21243 +
21244 +;
21245 +run;
21246 +
21247 +proc sort data=&outdata;
21248 +    by Cluster;
21249 +run;
21250 +proc sort data =&indata3;
21251 +    by Cluster;
21252 +run;
21253 +
21254 +data &outdata;
21255 +     set &outdata &indata3;
21256 +     by Cluster;
21257 +run;
21258 +
21259 +
21260 +/* Create the Selected variable with all YES */
21261 +
21262 +data &outdata;
21263 +     set &outdata;
21264 +     length RsqRatio 8.;
21265 +     length Selected $8;
21266 +     *label RSqRatio = "1-R**2 Ratio";
21267 +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
21268 +     *label Selected = "Variable Selected";
21269 +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
21270 +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
21271 +     Selected ='YES';
21272 +     rename _LABEL_ = Label;
21273 +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
21274 +run;
21275 +
21276 +
21277 +/*----  Selected = Y/N will be assigened at the %score                   -------+
21278 +        Just create the Selected variable with all YES at the step above
21279 + +------------------------------------------------------------------------------+
21280 +
21281 +proc sort data=&outdata;
21282 +    by Cluster RsqRatio;
21283 +run;
21284 +
21285 +%if &selectedcomp eq CLUSTERCOMP %then %do;
21286 +data &outdata;
21287 +     set &outdata; by Cluster;
21288 +     length Selected $8;
21289 +     label Selected = "Variable Selected";
21290 +     if  first.Cluster then Selected ='Yes';
21291 +     else Selected = 'No';
21292 +    run;
21293 +%end;
21294 +%else %do;
21295 +data &outdata(drop = _var _varchange);
21296 +     set &outdata; retain _var 0; by Cluster;
21297 +     length Selected $8;
21298 +     label Selected = "Variable Selected";
21299 +     if first.Cluster then  _varchange = 0;
21300 +     else _varchange =1;
21301 +     if _var ne _varchange then  Selected  = 'Yes';
21302 +     else Selected = 'No';
21303 +     if last.cluster then  _var = 0;
21304 +     else _var = _varchange;
21305 +run;
21306 +%end;
21307 +
21308 +--------------------------------------------------------------*/
21309 +
21310 +quit;
21311 +%mend MakeVarClusResultTable;
21312 +
21313 +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
21314 +     proc sort data =&indata;
21315 +        by cluster;
21316 +     run;
21317 +     proc transpose data =&indata
21318 +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
21319 +          by cluster;
21320 +     run;
21321 +     data &outdata;
21322 +          set  &outdata;
21323 +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21324 +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21325 +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
21326 +     run;
21327 +     %if &globalclusid ne %then %do;
21328 +     data &outdata;
21329 +          Length GCluster $16;
21330 +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21331 +          set  &outdata;
21332 +          GCluster ="GC&globalclusid.";
21333 +          run;
21334 +     %end;
21335 +
21336 +%Mend MakePlotDataFromCorrTable;
21337 +
21338 +
21339 +%macro MakeCorrelation(indata=,
21340 +                       outstat=_tmpoutstat,
21341 +                       corrmatrix=N,
21342 +                       outcorr=_tmpoutcorr,
21343 +                       includeclassvar=N,
21344 +                       target=,
21345 +                       freq=,
21346 +                       weight=);
21347 +   %if &target eq  %then %do;
21348 +
21349 +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
21350 +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
21351 +       %if &includeclassvar eq Y %then %do;
21352 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
21353 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21354 +          %do i = 2 %to &nvar;
21355 +          %let varname = %sysfunc(varname(&dsid, &i));
21356 +          &varname
21357 +          %end;
21358 +       %end;
21359 +       ;
21360 +      %if &freq ne  %then %do;
21361 +          freq &freq;
21362 +      %end;
21363 +      %if &weight ne  %then %do;
21364 +          weight &weight;
21365 +      %end;
21366 +
21367 +      run;
21368 +      %if &corrmatrix eq Y %then %do;
21369 +      data  &outcorr (drop = _NCL_ _TYPE_);
21370 +           set  &outstat ;
21371 +           if _TYPE_ ='CORR' then output;
21372 +      run;
21373 +      %end;
21374 +    %end;
21375 +    %else %do;
21376 +       proc corr data=&indata outp=&outstat noprint;
21377 +            var
21378 +       %let dsid = %sysfunc(open(&indata));
21379 +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
21380 +          %do i = 1 %to &nvar;
21381 +              %let _name = %sysfunc(varname(&dsid, &i));
21382 +              %if &_name ne &target %then;
21383 +              &_name
21384 +           %end;
21385 +        %let dsid= %sysfunc(close(&dsid));
21386 +        ;
21387 +        with &target;
21388 +        run;
21389 +    %end;
21390 +    quit;
21391 +%mend MakeCorrelation;
21392 +
21393 +
21394 +%macro MakeCorrelationDistance(indata=,
21395 +                               outdata=,
21396 +                               rsquare = N
21397 +                               );
21398 +    data corr_tmp;
21399 +        set &indata;
21400 +        if _N_ = 1 then do;
21401 +           output;
21402 +           stop;
21403 +         end;
21404 +    run;
21405 +    %if &outdata ne  %then %let  _outdata = &outdata;
21406 +    %else %let _outdata = &indata;
21407 +
21408 +    data &_outdata;
21409 +         set &indata;
21410 +
21411 +         %let dsid = %sysfunc(open(work.corr_tmp));
21412 +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
21413 +          %do i = 2 %to &nvar;
21414 +              %let _name = %sysfunc(varname(&dsid, &i));
21415 +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
21416 +              %else  %let _name_md = &_name;
21417 +              &_name = 1- &_name_md;
21418 +          %end;
21419 +      %let dsid= %sysfunc(close(&dsid));
21420 +      run;
21421 +      proc datasets lib = work nolist;
21422 +           delete corr_tmp;
21423 +      run;
21424 +      quit;
21425 +  %mend MakeCorrelationDistance;
21426 +
21427 +
21428 +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
21429 +                                   rsquare = N
21430 +                                   );
21431 +    data corr_tmp;
21432 +        set &indata;
21433 +    run;
21434 +    proc sql noprint;
21435 +           update &indata
21436 +           set
21437 +     %let dsid = %sysfunc(open(work.corr_tmp));
21438 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
21439 +          %do i = 4 %to &nvar;
21440 +          %let _name = %sysfunc(varname(&dsid, &i));
21441 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
21442 +            %else  %let _name_md = &_name;
21443 +            %if &i < &nvar %then %do;
21444 +               &_name = 1- &_name_md ,
21445 +            %end;
21446 +            %else %do;
21447 +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
21448 +            %end;
21449 +          %end;
21450 +      %let dsid= %sysfunc(close(&dsid));
21451 +
21452 +      select * from &indata;
21453 +      run;
21454 +     data &indata( drop = _NCL_);
21455 +           set &indata;
21456 +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
21457 +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
21458 +     run;
21459 +     data &indata(DROP = _NCL_);
21460 +           set &indata;
21461 +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
21462 +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
21463 +           rename _NAME_ = _VAR_;
21464 +     run;
21465 +     proc datasets lib = work nolist;
21466 +           delete corr_tmp;
21467 +     run;
21468 +     quit;
21469 + %mend UpdateOutStatCorrToDistance;
21470 +
21471 +
21472 +%macro HierClusWithCorr(indata= ,
21473 +                        ncluster=,
21474 +                        method = Ward,
21475 +                        outtree = _outtree,
21476 +                        idvar =_VAR_,
21477 +                        outdata=,
21478 +                        rescore = N,
21479 +                        newncluster=
21480 +                        );
21481 +      %global &newncluster;
21482 +      %if &rescore ne Y %then %do;
21483 +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
21484 +                   method=&method outtree=&outtree noprint;
21485 +           id &idvar;
21486 +      run;
21487 +      %end;
21488 +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
21489 +      run;
21490 +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
21491 +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
21492 +      run;
21493 +      data _outcontent;
21494 +          set _outcontent;
21495 +          if NAME in ('_TYPE_' , '_VAR_') then delete;
21496 +          index = 1;
21497 +          rename NAME = _NAME_;
21498 +      run;
21499 +      proc sort data=_outcontent;
21500 +          by _NAME_;
21501 +      run;
21502 +      proc sort data =&outdata;
21503 +           by _NAME_;
21504 +      run;
21505 +      data &outdata(drop=index);
21506 +          merge &outdata _outcontent;
21507 +          by _NAME_;
21508 +          if index = . then delete;
21509 +      run;
21510 +      /*-----------------------------------------------------------*/
21511 +      data &outdata;
21512 +           length CLUSNAME $16;
21513 +           set &outdata;
21514 +           if CLUSTER > &ncluster then delete;
21515 +           CLUSNAME='GC'||strip(CLUSTER);
21516 +           *label CLUSNAME = "Cluster Name";
21517 +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
21518 +           rename _NAME_ = VARIABLE ;
21519 +           *label _NAME_ = "Variable";
21520 +           *label CLUSTER = "Cluster";
21521 +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21522 +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21523 +      run;
21524 +      proc sort data=&outdata out=&outdata;
21525 +           by CLUSTER;
21526 +      run;
21527 +      proc means data =&outdata noprint;
21528 +           output out=_meanout;
21529 +      run;
21530 +      data _null_;
21531 +            set _meanout;
21532 +            if strip(_STAT_) eq 'MAX' then do;
21533 +            call symput("&newncluster", CLUSTER);
21534 +            stop;
21535 +            end;
21536 +      run;
21537 +
21538 +      proc datasets lib = work nolist;
21539 +           delete _outcontent _meanout;
21540 +      run;
21541 +      quit;
21542 +%mend  HierClusWithCorr;
21543 +
21544 +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
21545 +
21546 +     data _tmpindata;
21547 +          set &indata;
21548 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
21549 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
21550 +          if _TYPE_ = 'STD' then _NAME_='STD';
21551 +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
21552 +          DROP _TYPE_ _NCL_;
21553 +     run;
21554 +
21555 +     filename _file_  "&fileRef";
21556 +
21557 +     data _null_;
21558 +        FILE _file_ MOD;
21559 +        put ' ';
21560 +        put "/*-------------------------------------------------*/";
21561 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
21562 +        put "/*-------------------------------------------------*/";
21563 +        put ' ';
21564 +        %let dsid = %sysfunc(open(work._tmpindata));
21565 +
21566 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
21567 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
21568 +        %let k = 1;
21569 +        %do %while(^%sysfunc(fetch(&dsid)));
21570 +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21571 +               %if &k > 2 %then %do;
21572 +                %let cn = %eval(&k-2);
21573 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
21574 +                %end;
21575 +                %let k = %eval(&k+1);
21576 +
21577 +        %end;
21578 +        %let rc = %sysfunc(rewind(&dsid));
21579 +
21580 +        %do j= 2 %to &nvar;
21581 +            %let _varname = %sysfunc(varname(&dsid, &j));
21582 +            %do %while(^%sysfunc(fetch(&dsid)));
21583 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21584 +                %if &_name = MEAN %then
21585 +                %let _mean = %sysfunc(getvarn(&dsid, &j));
21586 +                %else %if &_name = STD %then
21587 +                %let _std = %sysfunc(getvarn(&dsid, &j));
21588 +                %else %do;
21589 +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
21590 +                      %let abscoeff = %sysfunc(abs(&coeff));
21591 +                          %if &abscoeff >  0 %then %do;
21592 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
21593 +                           %end;
21594 +                 %end;
21595 +             %end;
21596 +             %let rc = %sysfunc(rewind(&dsid));
21597 +         %end;
21598 +
21599 +        %let dsid= %sysfunc(close(&dsid));
21600 +
21601 +     run;
21602 +
21603 +     filename _file_;
21604 +     proc datasets lib = work nolist;
21605 +           delete _tmpindata;
21606 +     run;
21607 +     quit;
21608 +%mend CreateScoreCode2;
21609 +
21610 +
21611 +%macro MakeDeltaCode2(groupds=,deltacodefile=);
21612 +
21613 +     /*--- Build Code to Modify Metadata ---*/
21614 +     filename X "&deltacodefile";
21615 +     data _null_;
21616 +        FILE X;
21617 +        set &groupds end=eof;
21618 +        if _N_=1 then do;
21619 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
21620 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
21621 +           %end;
21622 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
21623 +           put "if upcase(strip(NAME)) in (";
21624 +        end;
21625 +        if Strip(upcase(Selected)) eq 'YES' then do;
21626 +           string = '"'!!trim(left(VARIABLE))!!'"';
21627 +           put string;
21628 +        end;
21629 +        if eof then do;
21630 +           put ') then ROLE="INPUT";';
21631 +           put 'else ROLE="REJECTED";';
21632 +           put 'end;';
21633 +
21634 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
21635 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
21636 +           %end;
21637 +        end;
21638 +     run;
21639 +     quit;
21640 +
21641 +     filename X;
21642 +     quit;
21643 +%mend MakeDeltaCode2;
21644 +
21645 +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
21646 +  %global &ngc;
21647 +  data _null_;
21648 +  %if &indata ne %then %do;
21649 +      %let dsid = %sysfunc(open(&indata));
21650 +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
21651 +      %let dsid = %sysfunc(close(&dsid));
21652 +  %end;
21653 +  %else %do;
21654 +       %let nvar = %eval(&ninput+&ndummy); ;
21655 +  %end;
21656 +  %let numgc = %eval(&nvar/&div+2);
21657 +  %let &ngc = &numgc;
21658 +   run;
21659 +  quit;
21660 +%mend getInitialGClusterNumber;
21661 +
21662 +
21663 +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
21664 +data &outlink(drop = Selected);
21665 +     set &indata;
21666 +     LINKID = _N_;
21667 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
21668 +run;
21669 +data &outnode(keep=NODEID TYPE LABEL);
21670 +    set &indata;
21671 +    length TYPE $16;
21672 +    rename VARIABLE = NODEID;
21673 +    *label  CLUSNAME="Node ID";
21674 +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
21675 +    TYPE = "VARIABLE";
21676 +    *label TYPE = "Node Type";
21677 +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
21678 +    run;
21679 +data _tmp(keep=NODEID TYPE LABEL);
21680 +    set &indata;
21681 +    length TYPE $16;
21682 +    rename CLUSNAME = NODEID;
21683 +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
21684 +    TYPE = "GCLUSTER";
21685 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
21686 +    run;
21687 +proc sort data=_tmp;
21688 +    by NODEID;
21689 +run;
21690 +data _tmp;
21691 +    set _tmp; by NODEID;
21692 +    if first.NODEID then output;
21693 +run;
21694 +proc sort data=&outnode;
21695 +    by NODEID;
21696 +run;
21697 +data  &outnode;
21698 +    set _tmp &outnode;
21699 +run;
21700 +proc datasets lib = work nolist;
21701 +     delete _tmp;
21702 +run;
21703 +quit;
21704 +%mend MakeGobalConstellData;
21705 +
21706 +/* Make contellation plot data among GCLUSTERS */
21707 +
21708 +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
21709 +
21710 +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
21711 +     set &indata;
21712 +     LINKID = _N_;
21713 +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
21714 +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
21715 +     end;
21716 +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
21717 +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
21718 +     end;
21719 +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
21720 +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
21721 +    end;
21722 +run;
21723 +
21724 +data _tmp_outrsquare;
21725 +        set &inoutrsq;
21726 +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
21727 +run;
21728 +
21729 +proc freq data =_tmp_outrsquare noprint;
21730 +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
21731 +run;
21732 +
21733 +data &outnode(keep=_NAME_ TYPE LABEL);
21734 +    set &outlink;
21735 +    length TYPE $16;
21736 +    length LABEL $100;
21737 +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
21738 +
21739 +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
21740 +    TYPE = "GCLUSTER";
21741 +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
21742 +    end;
21743 +    else do;
21744 +    TYPE= "ROOT";
21745 +    LABEL= _NAME_;
21746 +    end;
21747 +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
21748 +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
21749 +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
21750 +    run;
21751 +
21752 +proc sort data=&outnode;
21753 +     by _NAME_;
21754 +proc sort data=_tmp_GCLUSFREQ;
21755 +     by _NAME_;
21756 +run;
21757 +
21758 +data  &outnode;
21759 +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
21760 +     if COUNT=. then COUNT=1;
21761 +run;
21762 +
21763 +proc datasets lib = work nolist;
21764 +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
21765 +run;
21766 +
21767 +quit;
21768 +%Mend MakeGClusterConstData;
21769 +
21770 +
21771 +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
21772 +
21773 +    data _gscoretmpds;
21774 +          set &indata;
21775 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
21776 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
21777 +          if _TYPE_ = 'STD' then _NAME_='STD';
21778 +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
21779 +          DROP _TYPE_ _NCL_;
21780 +     run;
21781 +
21782 +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
21783 +        GCluster Component &globalclusid ------ */
21784 +
21785 +    filename _file_  "&fileref";
21786 +
21787 +    data _null_;
21788 +        %if &globalclusid eq 1 %then %do;
21789 +          FILE _file_;
21790 +        %end;
21791 +        %else %do;
21792 +          FILE _file_ MOD;
21793 +        %end;
21794 +
21795 +        %let dsid = %sysfunc(open(work._gscoretmpds));
21796 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
21797 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
21798 +
21799 +        %let k = 1;
21800 +        %do %while(^%sysfunc(fetch(&dsid)));
21801 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21802 +                %if &k > 2 %then %do;
21803 +                put "&_name = 0 ; ";
21804 +                %end;
21805 +                %let k = %eval(&k+1);
21806 +        %end;
21807 +
21808 +        %let rc = %sysfunc(rewind(&dsid));
21809 +        %do i= 2 %to &nvar;
21810 +            %let _varname =  %sysfunc(varname(&dsid, &i));
21811 +            %do %while(^%sysfunc(fetch(&dsid)));
21812 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21813 +                %if &_name = MEAN %then
21814 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
21815 +                %else %if &_name = STD %then
21816 +                %let _std = %sysfunc(getvarn(&dsid, &i));
21817 +                %else %do;
21818 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
21819 +                      %let abscoeff = %sysfunc(abs(&coeff));
21820 +                          %if &abscoeff >  0 %then %do;
21821 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
21822 +                           %end;
21823 +                 %end;
21824 +             %end;
21825 +             %let rc = %sysfunc(rewind(&dsid));
21826 +
21827 +         %end;
21828 +
21829 +        %let dsid= %sysfunc(close(&dsid));
21830 +       run;
21831 +
21832 +
21833 +       proc datasets lib=work nolist;
21834 +            delete _gscoretmpds;
21835 +       run;
21836 +      quit;
21837 +
21838 +%mend CreateGClusterScoreCode;
21839 +
21840 +
21841 +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
21842 +
21843 +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
21844 +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
21845 +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
21846 +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
21847 +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
21848 +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
21849 +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
21850 +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
21851 +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
21852 +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
21853 +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
21854 +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
21855 +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
21856 +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
21857 +
21858 +   filename gsfile "&gscorecode";
21859 +
21860 +   data &EM_USER_GSCORE;
21861 +             set &indata;
21862 +             %include  gsfile;
21863 +        keep
21864 +        %do i=1 %to &ngcluster;
21865 +         %let gcvarname = GC&i;
21866 +         &gcvarname
21867 +        %end;
21868 +     ;
21869 +   run;
21870 +
21871 +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
21872 +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
21873 +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
21874 +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
21875 +    noprint  ;
21876 +     var
21877 +       %do i=1 %to &ngcluster;
21878 +         %let gcvarname = GC&i;
21879 +         &gcvarname
21880 +        %end;
21881 +   ;
21882 +   run;
21883 +
21884 +
21885 +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
21886 +   data &EM_USER_GSCORECORRPLOT ;
21887 +        set &EM_USER_GSCORECORRPLOT;
21888 +        rename _X_ = X;
21889 +        rename _Y_ = Y;
21890 +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21891 +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21892 +   run;
21893 +
21894 +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
21895 +
21896 +   data &EM_USER_GSCORETREE;
21897 +        length _NAME_ $32;
21898 +        length _LABEL_ $100;
21899 +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
21900 +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
21901 +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
21902 +        end;else do;
21903 +         _LABEL_ = _NAME_;
21904 +        end;
21905 +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
21906 +
21907 +   run;
21908 +
21909 +   quit;
21910 +
21911 +%mend MakeGClusterCorrelation;
21912 +
21913 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT.SOURCE.
21914 +%macro report;
21915 +    %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
21916 +
21917 +    data _null_;
21918 +         set &EM_USER_VARCLUSMETA;
21919 +         if _N_=1 then
21920 +         call symput('_trainnum', TrainNum);
21921 +    run;
21922 +   %if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
21923 +           filename temp catalog 'sashelp.emexpl.variableclustering_report1.source';
21924 +           %include temp;
21925 +           filename temp;
21926 +           %report1;
21927 +       %end;
21928 +   %if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
21929 +           filename temp catalog 'sashelp.emexpl.variableclustering_report2.source';
21930 +           %include temp;
21931 +           filename temp;
21932 +           %report2;
21933 +    %end;
21934 +
21935 +   /* End of all runs, change the flag of newtrain to N */
21936 +    %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
21937 +    data &EM_USER_VARCLUSMETA;
21938 +         set &EM_USER_VARCLUSMETA;
21939 +         NewTrain = "N";
21940 +    run;
21941 +    quit;
21942 +%mend report;
21943 +
21944 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      61128:166
NOTE: There were 1 observations read from the data set EMWS1.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT1.SOURCE.
21945 +%macro report1;
21947 +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
21948 +   %EM_GETNAME(key=OUTVARSEL, type=DATA) ;
21949 +   %EM_GETNAME(key=CLUSFREQ, type=DATA) ;
21951 +   data &EM_USER_OUTVARSEL;
21952 +        set &EM_USER_OUTRSQUARE;
21953 +        if upcase(strip(SELECTED)) = 'YES' then output;
21954 +   run;
21956 +   data _tmp_outrsquare;
21957 +        set &EM_USER_OUTRSQUARE;
21958 +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
21959 +   run;
21961 +   proc freq data =_tmp_outrsquare noprint;
21962 +        tables cluster/out=&EM_USER_CLUSFREQ sparse;
21963 +   run;
21965 +   proc datasets lib = work nolist;
21966 +     delete _tmp_outrsquare;
21967 +   run;
21969 +   data &EM_USER_CLUSFREQ;
21970 +       set &EM_USER_CLUSFREQ;
21971 +       label
21972 +           cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, NOQUOTE))"
21973 +           count   = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqcnt, NOQUOTE))"
21974 +           percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqpct, NOQUOTE))"
21975 +       ;
21976 +   run;
21978 +   %EM_REPORT(key=OUTVARSEL, viewtype=DATA, block=MODEL, autodisplay=Y, description=selectedvariables);
21979 +   %EM_REPORT(key=CLUSFREQ, viewtype=DATA, block=MODEL, autodisplay=Y, description=varfreqbycluster);
21980 +   %EM_REPORT(key=OUTRSQUARE, viewtype=DATA, block=MODEL, autodisplay=Y, description=varseltable);
21982 +   %EM_REPORT(linkkey=OUTLINK, nodekey=OUTNODE, viewtype=Constellation,  autodisplay=Y, block=MODEL,  linkfrom=Cluster, linkto=Variable, linkid=LINKID, nodeid=NODEID, nodeshape=TYPE, description=clusterplot);
21983 +   %EM_REPORT(KEY=OUTTREE, VIEWTYPE=DENDROGRAM,  autodisplay=Y, block =MODEL, Name=NAME, PARENT=PARENT, HEIGHT=Proportion , TipText = Variable, description=dendrogram );
21984 +   %EM_REPORT(key=OUTRSQUARE, view = 1, viewtype=SCATTER, x=Cluster, y=RSqRatio, autodisplay=N, group=Selected, block=MODEL, description=rsqplot);
21985 +   %EM_REPORT(view = 1, y=RsqWithOwnClusComp);
21986 +   %EM_REPORT(view=1, y=RsqWithNextClusComp);
21987 +   %EM_REPORT(key=OUTCORRPLOT, viewtype=HISTOGRAM, X=_X_,Y=_Y_, FREQ=correlation, autodisplay=N, block=MODEL, description=varcorr);
21988 +   %EM_REPORT(key=OUTCLUSCORRPLOT, viewtype=HISTOGRAM, X=X,Y=Y, FREQ=Correlation, autodisplay=N, block=MODEL, description=cluscorr);
21989 +   %EM_REPORT(key=OUTCLUSSTRUCT, view=2, viewtype=BAR, block=MODEL, x=Cluster, freq=_anynumeric_ , autodisplay=N,  description=corrstruct) ;
21991 +   /*
21992 +   %EM_REPORT(KEY=OUTTREE, VIEWTYPE=DENDROGRAM,  autodisplay=N, block =Dendrogram, Name=_NAME_, Parent=_PARENT_, Height=_VAREXP_, TipText=Variable, description=totvar);
21993 +   %EM_REPORT(key=OUTCORR, viewtype=DATA, block=MODEL,description=corrmatrix) ;
21994 +   %EM_REPORT(key=OUTSTATPLOT, viewtype=DATA, block=MODEL, description=sumstat) ; */
21997 +%mend report1;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: There were 44 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS1.VARCLUS_OUTVARSEL has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 44 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: The data set WORK._TMP_OUTRSQUARE has 34 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 34 observations read from the data set WORK._TMP_OUTRSQUARE.
NOTE: The data set EMWS1.VARCLUS_CLUSFREQ has 11 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_OUTRSQUARE (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set EMWS1.VARCLUS_CLUSFREQ.
NOTE: The data set EMWS1.VARCLUS_CLUSFREQ has 11 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 396 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 396 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 528 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 528 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 660 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 660 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 793 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 793 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 926 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 926 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1059 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1059 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1192 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1192 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1325 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1325 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1457 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.VARCLUS_VARCLUSMETA.
NOTE: The data set EMWS1.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22000  *------------------------------------------------------------*;
22001  * End REPORT: VarClus;
22002  *------------------------------------------------------------*;
22003
 
22004  /* Reset EM Options */
22005  options formchar="|----|+|---+=|-/\<>*";
22006  options nocenter ls=256 ps=10000;
22007  goptions reset=all device=GIF NODISPLAY;
 
22008  proc sort data=WORK.EM_USER_REPORT;
22009  by ID VIEW;
22010  run;
 
NOTE: There were 1457 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1457 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
